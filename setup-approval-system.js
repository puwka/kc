const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupApprovalSystem() {
    try {
        console.log('üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –ª–∏–¥–æ–≤...');
        
        // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        const sqlPath = path.join(__dirname, 'database', 'lead-approval-system.sql');
        const sqlContent = fs.readFileSync(sqlPath, 'utf8');
        
        console.log('üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç...');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const sqlCommands = sqlContent
            .split(';')
            .map(cmd => cmd.trim())
            .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < sqlCommands.length; i++) {
            const command = sqlCommands[i];
            if (command.trim()) {
                try {
                    console.log(`   ${i + 1}/${sqlCommands.length}: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É...`);
                    const { error } = await supabase.rpc('exec_sql', { sql_query: command });
                    
                    if (error) {
                        // –ï—Å–ª–∏ exec_sql –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        const { error: directError } = await supabase
                            .from('leads')
                            .select('id')
                            .limit(1);
                        
                        if (directError && directError.message.includes('column leads.approval_status does not exist')) {
                            console.log(`   ‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤ Supabase SQL Editor`);
                            console.log(`   üìù SQL: ${command.substring(0, 100)}...`);
                        } else {
                            console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                            successCount++;
                        }
                    } else {
                        console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                        successCount++;
                    }
                } catch (err) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}: ${err.message}`);
                    errorCount++;
                }
            }
        }
        
        console.log('');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
        console.log('');
        
        if (errorCount > 0) {
            console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é:');
            console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
            console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
            console.log('   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ database/lead-approval-system.sql');
            console.log('');
        }
        
        console.log('üéØ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞:');
        console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-approval-system.js');
        console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è');
        console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –≤ –û–ö–ö');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupApprovalSystem();
