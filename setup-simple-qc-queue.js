const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupSimpleQCQueue() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞ –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É qc_operator_status...');
    
    const { error: createTableError } = await supabase
      .from('qc_operator_status')
      .select('id')
      .limit(1);

    if (createTableError && createTableError.code === 'PGRST116') {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ qc_operator_status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π SQL –≤ Supabase Dashboard:');
      console.log('');
      console.log('```sql');
      console.log('CREATE TABLE IF NOT EXISTS qc_operator_status (');
      console.log('    id SERIAL PRIMARY KEY,');
      console.log('    operator_id UUID REFERENCES profiles(id) ON DELETE CASCADE,');
      console.log('    is_available BOOLEAN DEFAULT true,');
      console.log('    current_review_id UUID REFERENCES quality_reviews(id) ON DELETE SET NULL,');
      console.log('    last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
      console.log('    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
      console.log('    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
      console.log('    UNIQUE(operator_id)');
      console.log(');');
      console.log('');
      console.log('CREATE INDEX IF NOT EXISTS idx_qc_operator_status_available ON qc_operator_status(is_available);');
      console.log('CREATE INDEX IF NOT EXISTS idx_qc_operator_status_operator_id ON qc_operator_status(operator_id);');
      console.log('```');
      console.log('');
      console.log('–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.');
      return;
    } else if (createTableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', createTableError);
      return;
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ qc_operator_status —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    console.log('üë• –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...');
    
    const { data: qcOperators, error: qcError } = await supabase
      .from('profiles')
      .select('id, name')
      .eq('role', 'quality');

    if (qcError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', qcError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${qcOperators.length} –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤`);

    for (const operator of qcOperators) {
      const { error: insertError } = await supabase
        .from('qc_operator_status')
        .upsert({
          operator_id: operator.id,
          is_available: true,
          last_activity: new Date().toISOString()
        }, {
          onConflict: 'operator_id'
        });

      if (insertError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${operator.name}:`, insertError);
      } else {
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è ${operator.name}`);
      }
    }

    console.log('üéâ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log('  ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –û–ö–ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
    console.log('  ‚Ä¢ API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é');
    console.log('  ‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –û–ö–ö');
    console.log('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupSimpleQCQueue();
