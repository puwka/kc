// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let leads = [];
let operators = [];
let currentLead = null;
let operatorStatus = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        const token = localStorage.getItem('token');
        if (token) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            checkAuth(token);
        } else {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = '/login.html';
            return;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–≤–æ–Ω–∫–∞
        if (sessionStorage.getItem('shouldAutoCallNext') === 'true') {
            sessionStorage.removeItem('shouldAutoCallNext');
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            setTimeout(() => {
                loadAnalytics();
            }, 1000);
        }
        
        if (sessionStorage.getItem('shouldRefreshAnalytics') === 'true') {
            sessionStorage.removeItem('shouldRefreshAnalytics');
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            setTimeout(() => {
                loadAnalytics();
            }, 1000);
        }
    } catch (error) {
        console.error('Error initializing app:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

function setupEventListeners() {
    try {
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', handleLogout);
        }

    // –õ–∏–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const addLeadBtn = document.getElementById('addLeadBtn');
    if (addLeadBtn) {
        addLeadBtn.addEventListener('click', showAddLeadModal);
    }
    
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
        leadForm.addEventListener('submit', handleLeadSubmit);
    }
    
    const refreshBtn = document.getElementById('refreshBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', loadLeads);
    }
    
    const statusFilter = document.getElementById('statusFilter');
    if (statusFilter) {
        statusFilter.addEventListener('change', filterLeads);
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const closeBtn = document.querySelector('.close');
    if (closeBtn) {
        closeBtn.addEventListener('click', hideModal);
    }
    
    const cancelBtn = document.getElementById('cancelBtn');
    if (cancelBtn) {
        cancelBtn.addEventListener('click', hideModal);
    }
    
    const leadModal = document.getElementById('leadModal');
    if (leadModal) {
        leadModal.addEventListener('click', function(e) {
            if (e.target === this) hideModal();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const callBtn = document.getElementById('callBtn');
    if (callBtn) {
        callBtn.addEventListener('click', handleCall);
    }
    
    const operatorCallBtn = document.getElementById('operatorCallBtn');
    if (operatorCallBtn) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞
        operatorCallBtn.disabled = false;
        operatorCallBtn.style.display = 'inline-block';
        operatorCallBtn.textContent = 'üìû –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å';
        operatorCallBtn.addEventListener('click', handleOperatorCall);
    }
    
    const cancelQueueBtn = document.getElementById('cancelQueueBtn');
    if (cancelQueueBtn) {
        cancelQueueBtn.addEventListener('click', handleCancelQueue);
    }
    
    const cancelCallBtn = document.getElementById('cancelCallBtn');
    if (cancelCallBtn) {
        cancelCallBtn.addEventListener('click', handleCancelCall);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const successBtn = document.getElementById('successBtn');
    if (successBtn) {
        successBtn.addEventListener('click', () => completeLead('success'));
    }
    
    const failBtn = document.getElementById('failBtn');
    if (failBtn) {
        failBtn.addEventListener('click', () => completeLead('fail'));
    }
    
    const skipBtn = document.getElementById('skipBtn');
    if (skipBtn) {
        skipBtn.addEventListener('click', () => completeLead('new'));
    }
    
    const closeProcessModal = document.getElementById('closeProcessModal');
    if (closeProcessModal) {
        closeProcessModal.addEventListener('click', hideProcessModal);
    }
    
    const leadProcessModal = document.getElementById('leadProcessModal');
    if (leadProcessModal) {
        leadProcessModal.addEventListener('click', function(e) {
            if (e.target === this) hideProcessModal();
        });
    }
    
    } catch (error) {
        console.error('Error setting up event listeners:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞

async function checkAuth(token) {
    try {
        const response = await fetch('/api/auth/me', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (response.ok) {
            const data = await response.json();
            currentUser = data.user;
            showDashboard();
        } else if (response.status === 401) {
            localStorage.removeItem('token');
            window.location.href = '/login.html';
        } else {
            localStorage.removeItem('token');
            window.location.href = '/login.html';
        }
    } catch (error) {
        localStorage.removeItem('token');
        window.location.href = '/login.html';
    }
}

function handleLogout() {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    currentUser = null;
    window.location.href = '/login.html';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
function showAuthPage() {
    const authPage = document.getElementById('authPage');
    const dashboardPage = document.getElementById('dashboardPage');
    const navUser = document.getElementById('navUser');
    
    if (authPage) authPage.style.display = 'block';
    if (dashboardPage) dashboardPage.style.display = 'none';
    if (navUser) navUser.style.display = 'none';
}

function showDashboard() {
    try {
        showLoader();
        
        const authPage = document.getElementById('authPage');
        const dashboardPage = document.getElementById('dashboardPage');
        const navUser = document.getElementById('navUser');
        
        if (authPage) authPage.style.display = 'none';
        if (dashboardPage) dashboardPage.style.display = 'block';
        if (navUser) navUser.style.display = 'flex';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userName = document.getElementById('userName');
        
        if (userName) userName.textContent = currentUser.name;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setupUserMenu();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loadUserEarnings();
    
    // –ï—Å–ª–∏ —Ä–æ–ª—å quality ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ä–∞–∑—É –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
    if (currentUser.role === 'quality') {
        hideLoader();
        window.location.href = '/quality.html';
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    const adminLink = document.getElementById('adminLink');
    const scriptsLink = document.getElementById('scriptsLink');
    const qualityLink = document.getElementById('qualityLink');
    if (currentUser.role === 'admin') {
        if (adminLink) adminLink.style.display = 'inline-block';
        if (scriptsLink) scriptsLink.style.display = 'inline-block';
    } else {
        if (adminLink) adminLink.style.display = 'none';
        if (scriptsLink) scriptsLink.style.display = 'none';
    }
    // –°—Å—ã–ª–∫–∞ –≤ –æ—Ç–¥–µ–ª –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–æ–ª–∏ quality –∏ admin
    if (qualityLink) {
        if (currentUser.role === 'quality' || currentUser.role === 'admin') {
            qualityLink.style.display = 'inline-block';
        } else {
            qualityLink.style.display = 'none';
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const funnelSection = document.getElementById('funnelSection');
    const leadsSection = document.getElementById('leadsSection');
    const operatorPanel = document.getElementById('operatorPanel');
    const callBtn = document.getElementById('callBtn');
    
    if (currentUser.role === 'operator') {
        // –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –ø–∞–Ω–µ–ª—å –∑–≤–æ–Ω–∫–æ–≤
        if (funnelSection) funnelSection.style.display = 'none';
        if (leadsSection) leadsSection.style.display = 'none';
        if (operatorPanel) operatorPanel.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–Ω–µ–ª—å
        if (callBtn) callBtn.style.display = 'none';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –≤ –Ω–æ–≤–æ–º –¥–∏–∑–∞–π–Ω–µ
        setTimeout(() => {
            displayOperatorInfo();
        }, 50);
    } else {
        // –î–ª—è —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        if (funnelSection) funnelSection.style.display = 'block';
        if (leadsSection) leadsSection.style.display = 'block';
        if (operatorPanel) operatorPanel.style.display = 'none';
        if (callBtn) callBtn.style.display = 'inline-block';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        loadAnalytics();
    }, 100);
    
    if (currentUser.role === 'operator') {
        setTimeout(() => {
            loadOperatorStatus();
        }, 150);
        // –ê–≤—Ç–æ–∑–≤–æ–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–≤–æ–Ω–∫–∞
        const shouldAuto = sessionStorage.getItem('shouldAutoCallNext') === 'true';
        if (shouldAuto) {
            sessionStorage.removeItem('shouldAutoCallNext');
            autoCallNext();
        }
    } else {
        setTimeout(() => {
            loadFunnel();
            loadLeads();
            loadOperators();
        }, 200);
    }
    hideLoader();
    } catch (error) {
        console.error('Error showing dashboard:', error);
        hideLoader();
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞', 'error');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
// –§—É–Ω–∫—Ü–∏—è switchTab —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
function displayOperatorInfo() {
    try {
        const operatorName = document.getElementById('operatorName');
        const operatorId = document.getElementById('operatorId');
        const operatorBadge = document.getElementById('operatorBadge');
        const operatorLogin = document.getElementById('operatorLogin');
        
        if (operatorName) {
            operatorName.textContent = currentUser.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        if (operatorId) {
            operatorId.textContent = currentUser.id ? currentUser.id.slice(-5) : '-';
        }
        
        if (operatorBadge) {
            operatorBadge.textContent = currentUser.role === 'operator' ? '–û–ø–µ—Ä–∞—Ç–æ—Ä –£–¥–∞–ª–µ–Ω–∫–∞' : '–û–ø–µ—Ä–∞—Ç–æ—Ä';
        }
        
        if (operatorLogin) {
            operatorLogin.textContent = currentUser.email ? currentUser.email.split('@')[0] : '-';
        }
    } catch (error) {
        console.error('Error displaying operator info:', error);
    }
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
async function loadAnalytics() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        const personalResponse = await fetch('/api/analytics/overview', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        let personalStats = null;
        if (personalResponse.ok) {
            personalStats = await personalResponse.json();
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
        let globalStats = null;
        if (currentUser.role === 'supervisor' || currentUser.role === 'admin') {
            const globalResponse = await fetch('/api/analytics/global', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (globalResponse.ok) {
                globalStats = await globalResponse.json();
            }
        }

        displayAnalytics(personalStats, globalStats);
    } catch (error) {
        console.error('Error loading analytics:', error);
    }
}

function displayAnalytics(personalStats, globalStats) {
    try {
        const analyticsGrid = document.getElementById('analyticsGrid');
        if (!analyticsGrid) {
            console.error('Analytics grid element not found');
            return;
        }
        
        let analyticsHTML = '';

        if (!personalStats) {
            analyticsGrid.innerHTML = '<div class="analytics-card"><div class="analytics-card-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div><div class="analytics-card-value">-</div></div>';
            return;
        }

    // 5 –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    analyticsHTML += `
        <div class="analytics-card">
            <div class="analytics-card-title">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è</div>
            <div class="analytics-card-value">${personalStats.earnedToday || 0}</div>
            <div class="analytics-card-suffix">‚ÇΩ</div>
        </div>
        <div class="analytics-card">
            <div class="analytics-card-title">–ë–∞–ª–∞–Ω—Å</div>
            <div class="analytics-card-value">${personalStats.balance || 0}</div>
            <div class="analytics-card-suffix">‚ÇΩ</div>
        </div>
        <div class="analytics-card">
            <div class="analytics-card-title">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫</div>
            <div class="analytics-card-value">${personalStats.called || 0}</div>
            <div class="analytics-card-suffix">—à—Ç</div>
        </div>
        <div class="analytics-card">
            <div class="analytics-card-title">–ö–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö</div>
            <div class="analytics-card-value">${personalStats.success || 0}</div>
            <div class="analytics-card-suffix">—à—Ç</div>
        </div>
        <div class="analytics-card">
            <div class="analytics-card-title">% –£—Å–ø–µ—à–Ω—ã—Ö</div>
            <div class="analytics-card-value">${personalStats.conversion_rate || 0}</div>
            <div class="analytics-card-suffix">%</div>
        </div>
    `;

    analyticsGrid.innerHTML = analyticsHTML;
    } catch (error) {
        console.error('Error displaying analytics:', error);
    }
}

// –í–æ—Ä–æ–Ω–∫–∞
async function loadFunnel() {
    try {
        const response = await fetch('/api/analytics/funnel', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            const funnel = await response.json();
            displayFunnel(funnel);
        }
    } catch (error) {
        console.error('Error loading funnel:', error);
    }
}

function displayFunnel(funnel) {
    const funnelChart = document.getElementById('funnelChart');
    funnelChart.innerHTML = `
        <div class="funnel-step new">
            <div class="funnel-step-info">
                <h4>–ù–æ–≤—ã–µ</h4>
                <p>${funnel.new_percentage}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</p>
            </div>
            <div class="funnel-step-count">${funnel.new}</div>
        </div>
        <div class="funnel-step in_work">
            <div class="funnel-step-info">
                <h4>–í —Ä–∞–±–æ—Ç–µ</h4>
                <p>${funnel.in_work_percentage}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</p>
            </div>
            <div class="funnel-step-count">${funnel.in_work}</div>
        </div>
        <div class="funnel-step success">
            <div class="funnel-step-info">
                <h4>–£—Å–ø–µ—à–Ω—ã–µ</h4>
                <p>${funnel.success_percentage}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</p>
            </div>
            <div class="funnel-step-count">${funnel.success}</div>
        </div>
        <div class="funnel-step fail">
            <div class="funnel-step-info">
                <h4>–ù–µ—É–¥–∞—á–Ω—ã–µ</h4>
                <p>${funnel.fail_percentage}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</p>
            </div>
            <div class="funnel-step-count">${funnel.fail}</div>
        </div>
    `;
}

// –õ–∏–¥—ã
async function loadLeads() {
    try {
        const response = await fetch('/api/leads', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            leads = await response.json();
            displayLeads(leads);
        }
    } catch (error) {
        console.error('Error loading leads:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–æ–≤', 'error');
    }
}

function displayLeads(leadsToShow) {
    const tbody = document.getElementById('leadsTableBody');
    tbody.innerHTML = '';

    leadsToShow.forEach(lead => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${lead.id}</td>
            <td>${lead.name}</td>
            <td>${lead.phone}</td>
            <td><span class="status ${lead.status}">${getStatusText(lead.status)}</span></td>
            <td>${lead.assigned_user ? lead.assigned_user.name : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
            <td>${formatDate(lead.created_at)}</td>
            <td class="actions">
                <button class="btn btn-sm btn-warning" onclick="editLead(${lead.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                ${currentUser.role === 'admin' ? `<button class="btn btn-sm btn-danger" onclick="deleteLead(${lead.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
            </td>
        `;
        tbody.appendChild(row);
    });
}

function filterLeads() {
    const status = document.getElementById('statusFilter').value;
    let filteredLeads = leads;

    if (status) {
        filteredLeads = leads.filter(lead => lead.status === status);
    }

    displayLeads(filteredLeads);
}

function getStatusText(status) {
    const statusMap = {
        'new': '–ù–æ–≤—ã–π',
        'in_work': '–í —Ä–∞–±–æ—Ç–µ',
        'success': '–£—Å–ø–µ—à–Ω—ã–π',
        'fail': '–ù–µ—É–¥–∞—á–Ω—ã–π'
    };
    return statusMap[status] || status;
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
async function loadOperators() {
    if (currentUser.role !== 'admin' && currentUser.role !== 'supervisor') {
        return;
    }

    try {
        const response = await fetch('/api/analytics/operators', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            operators = await response.json();
            updateAssignedToSelect();
        }
    } catch (error) {
        console.error('Error loading operators:', error);
    }
}

function updateAssignedToSelect() {
    const select = document.getElementById('leadAssignedTo');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</option>';
    
    operators.forEach(operator => {
        const option = document.createElement('option');
        option.value = operator.id;
        option.textContent = `${operator.name} (${operator.role})`;
        select.appendChild(option);
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–∏–¥–∞
function showAddLeadModal() {
    document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–∞';
    document.getElementById('leadForm').reset();
    document.getElementById('leadId').value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ supervisor
    const assignedToGroup = document.getElementById('assignedToGroup');
    if (currentUser.role === 'admin' || currentUser.role === 'supervisor') {
        assignedToGroup.style.display = 'block';
    } else {
        assignedToGroup.style.display = 'none';
    }
    
    document.getElementById('leadModal').style.display = 'block';
}

function editLead(leadId) {
    const lead = leads.find(l => l.id === leadId);
    if (!lead) return;

    document.getElementById('modalTitle').textContent = '–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–¥–∞';
    document.getElementById('leadId').value = lead.id;
    document.getElementById('leadName').value = lead.name;
    document.getElementById('leadPhone').value = lead.phone;
    document.getElementById('leadStatus').value = lead.status;
    document.getElementById('leadAssignedTo').value = lead.assigned_to || '';
    document.getElementById('leadComment').value = lead.comment || '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ supervisor
    const assignedToGroup = document.getElementById('assignedToGroup');
    if (currentUser.role === 'admin' || currentUser.role === 'supervisor') {
        assignedToGroup.style.display = 'block';
    } else {
        assignedToGroup.style.display = 'none';
    }
    
    document.getElementById('leadModal').style.display = 'block';
}

async function handleLeadSubmit(e) {
    e.preventDefault();
    
    const leadId = document.getElementById('leadId').value;
    const name = document.getElementById('leadName').value;
    const phone = document.getElementById('leadPhone').value;
    const status = document.getElementById('leadStatus').value;
    const assignedTo = document.getElementById('leadAssignedTo').value;
    const comment = document.getElementById('leadComment').value;

    const leadData = { name, phone, status, comment };
    if (assignedTo) {
        leadData.assigned_to = assignedTo;
    }

    try {
        const url = leadId ? `/api/leads/${leadId}` : '/api/leads';
        const method = leadId ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(leadData)
        });

        const data = await response.json();

        if (response.ok) {
            hideModal();
            loadLeads();
            loadAnalytics();
            loadFunnel();
            showNotification(leadId ? '–õ–∏–¥ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        } else {
            showNotification(data.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
    }
}

async function deleteLead(leadId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ª–∏–¥–∞?')) {
        return;
    }

    try {
        const response = await fetch(`/api/leads/${leadId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            loadLeads();
            loadAnalytics();
            loadFunnel();
            showNotification('–õ–∏–¥ —É–¥–∞–ª–µ–Ω', 'success');
        } else {
            const data = await response.json();
            showNotification(data.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
    }
}

function hideModal() {
    document.getElementById('leadModal').style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞
function handleCall() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞
    const newLeads = leads.filter(lead => lead.status === 'new');
    
    if (newLeads.length === 0) {
        showNotification('–ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞', 'warning');
        return;
    }

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
    const leadToCall = newLeads[0];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ
    const confirmCall = confirm(
        `–ó–≤–æ–Ω–∏—Ç—å –ª–∏–¥—É?\n\n` +
        `–ò–º—è: ${leadToCall.name}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${leadToCall.phone}\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞`
    );

    if (confirmCall) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
        updateLeadStatus(leadToCall.id, 'in_work');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification(`–ó–≤–æ–Ω–æ–∫ –ª–∏–¥—É ${leadToCall.name} (${leadToCall.phone})`, 'success');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        console.log(`Calling ${leadToCall.name} at ${leadToCall.phone}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
async function loadOperatorStatus() {
    try {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π
        operatorStatus = { is_available: true };
        updateOperatorUI();
    } catch (error) {
        console.error('Error loading operator status:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        operatorStatus = { is_available: true };
        updateOperatorUI();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
function updateOperatorUI() {
    const callBtn = document.getElementById('operatorCallBtn');
    const cancelBtn = document.getElementById('cancelCallBtn');
    const callInfo = document.querySelector('.call-info h3');
    const callDesc = document.querySelector('.call-info p');

    // –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    if (callBtn && !callBtn.disabled) {
        callBtn.textContent = 'üìû –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å';
        callBtn.classList.remove('loading');
        callBtn.disabled = false;
        callBtn.style.display = 'inline-block';
    }
    
    if (cancelBtn) {
        cancelBtn.style.display = 'none';
        cancelBtn.disabled = true;
    }
    
    if (callInfo) {
        callInfo.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
    }
    
    if (callDesc) {
        callDesc.textContent = '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
async function handleOperatorCall() {
    const callBtn = document.getElementById('operatorCallBtn');
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        if (callBtn) {
            callBtn.disabled = true;
            callBtn.textContent = '‚è≥ –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏...';
            callBtn.classList.add('loading');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–∫–∏
        showQueueNotification();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å 7-—Å–µ–∫—É–Ω–¥–Ω–æ–π –∑–∞–≥–ª—É—à–∫–æ–π
        startQueueTimerWithTimeout(7);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–∏–¥–∞
        const response = await fetch('/api/operators/next-lead', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();

        if (!response.ok) {
            hideQueueNotification();
            resetCallButton();
            showNotification(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞', 'error');
            return;
        }

        if (!data.success) {
            hideQueueNotification();
            resetCallButton();
            showNotification(data.message || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏–¥–æ–≤', 'warning');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ª–∏–¥–∞
        currentLead = data.lead;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–≤–æ–Ω–∫–∞
        const autoCallCheckbox = document.getElementById('autoCallCheckbox');
        if (autoCallCheckbox) {
            localStorage.setItem('autoCall', autoCallCheckbox.checked);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        loadAnalytics();
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ OnlinePBX
        const callResult = await initiateRealCall(currentLead.id, currentLead.phone);
        
        if (callResult.success) {
            // –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            startCallMonitoring(callResult.callId, currentLead.id);
        } else {
            // –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É:', callResult.error);
            startFallbackCall(currentLead.id);
        }
        
    } catch (error) {
        console.error('Operator call error:', error);
        hideQueueNotification();
        resetCallButton();
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–∞', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞
function showProcessModal(lead) {
    document.getElementById('processLeadName').textContent = lead.name;
    document.getElementById('processLeadPhone').textContent = `üìû ${lead.phone}`;
    document.getElementById('processLeadCreated').textContent = `üìÖ –°–æ–∑–¥–∞–Ω: ${formatDate(lead.created_at)}`;
    
    document.getElementById('leadProcessModal').style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞
function hideProcessModal() {
    document.getElementById('leadProcessModal').style.display = 'none';
    currentLead = null;
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–¥–∞
async function completeLead(status) {
    if (!currentLead) return;

    try {
        const response = await fetch('/api/operators/complete-lead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                lead_id: currentLead.id,
                status: status
            })
        });

        const data = await response.json();

        if (response.ok) {
            hideProcessModal();
            showNotification(`–õ–∏–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ "${getStatusText(status)}"`, 'success');
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ª–∏–¥–∞
            currentLead = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            await loadOperatorStatus();
            loadAnalytics();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–≤–æ–Ω–æ–∫
            const autoCall = document.getElementById('autoCallCheckbox').checked;
            if (autoCall && status !== 'new') {
                setTimeout(() => {
                    handleOperatorCall();
                }, 2000);
            }
        } else {
            showNotification(data.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞', 'error');
        }
    } catch (error) {
        console.error('Complete lead error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏–¥–∞', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞
async function updateLeadStatus(leadId, newStatus) {
    try {
        const response = await fetch(`/api/leads/${leadId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ status: newStatus })
        });

        if (response.ok) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const lead = leads.find(l => l.id === leadId);
            if (lead) {
                lead.status = newStatus;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            loadLeads();
            loadAnalytics();
            loadFunnel();
        } else {
            const data = await response.json();
            showNotification(data.error, 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

// –£—Ç–∏–ª–∏—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

function showNotification(message, type = 'success') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä
function showLoader() {
    const overlay = document.getElementById('loaderOverlay');
    if (overlay) overlay.style.display = 'flex';
}

function hideLoader() {
    const overlay = document.getElementById('loaderOverlay');
    if (overlay) overlay.style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞
async function handleCancelCall() {
    const cancelBtn = document.getElementById('cancelCallBtn');
    const callBtn = document.getElementById('operatorCallBtn');
    
    try {
        cancelBtn.disabled = true;
        cancelBtn.textContent = '‚è≥ –û—Ç–º–µ–Ω—è—é...';

        // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã: –±—ç–∫–µ–Ω–¥ —Å–∞–º —Ä–∞–∑—Ä—É–ª–∏—Ç lead_id
        const response = await fetch('/api/operators/complete-lead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                lead_id: currentLead && currentLead.id ? currentLead.id : null,
                status: 'new',
                comment: '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'
            })
        });

        if (!response.ok) {
            const data = await response.json().catch(() => ({}));
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞');
        }

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ª–∏–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        currentLead = null;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        callBtn.style.display = 'inline-block';
        cancelBtn.style.display = 'none';

        showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω', 'info');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await loadOperatorStatus();
        loadAnalytics();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–≤–æ–Ω–∫–∞', 'error');
    } finally {
        cancelBtn.disabled = false;
        cancelBtn.textContent = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∏–¥—É
async function autoCallNext() {
    const autoCall = localStorage.getItem('autoCall') === 'true';
    if (!autoCall) return;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–∏–¥–∞
        const response = await fetch('/api/operators/next-lead', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.lead && data.lead.id) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞
                window.location.href = `/call.html?leadId=${data.lead.id}`;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å quality.js)
function setupUserMenu() {
    const userName = document.getElementById('userName');
    const userDropdown = document.getElementById('userDropdown');
    
    if (userName && userDropdown) {
        userName.addEventListener('click', function(e) {
            e.stopPropagation();
            if (userDropdown.style.display === 'none' || userDropdown.style.display === '') {
                userDropdown.style.display = 'block';
            } else {
                userDropdown.style.display = 'none';
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', function(e) {
            if (!userName.contains(e.target) && !userDropdown.contains(e.target)) {
                userDropdown.style.display = 'none';
            }
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å quality.js)
async function loadUserEarnings() {
    try {
        const token = localStorage.getItem('token');
        if (!token) return;
        
        const response = await fetch('/api/balance', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const earningsElement = document.getElementById('userEarnings');
            if (earningsElement) {
                earningsElement.textContent = `${(data.balance || 0).toFixed(2)} ‚ÇΩ`;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
let queueTimerInterval = null;
let queueStartTime = null;
let queueTimeout = null;
let redirectTimeout = null; // –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–∫–∏
function showQueueNotification() {
    const notification = document.getElementById('queueNotification');
    if (notification) {
        notification.style.display = 'block';
        queueStartTime = Date.now();
    }
}

// –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–∫–∏
function hideQueueNotification() {
    const notification = document.getElementById('queueNotification');
    if (notification) {
        notification.style.display = 'none';
        stopQueueTimer();
        clearQueueTimeout();
        clearRedirectTimeout(); // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞
    }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
function startQueueTimer() {
    stopQueueTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    
    queueTimerInterval = setInterval(() => {
        updateQueueTimer();
    }, 1000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
function stopQueueTimer() {
    if (queueTimerInterval) {
        clearInterval(queueTimerInterval);
        queueTimerInterval = null;
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateQueueTimer() {
    if (!queueStartTime) return;
    
    const elapsed = Math.floor((Date.now() - queueStartTime) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    
    const timerElement = document.getElementById('queueTimer');
    if (timerElement) {
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏
function handleCancelQueue() {
    hideQueueNotification();
    resetCallButton();
    showNotification('–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω', 'info');
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
function startQueueTimerWithTimeout(seconds) {
    stopQueueTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    clearQueueTimeout(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
    
    queueStartTime = Date.now();
    const targetTime = seconds * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    
    queueTimerInterval = setInterval(() => {
        updateQueueTimerWithLimit(seconds);
    }, 100);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    queueTimeout = setTimeout(() => {
        // –¢–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handleOperatorCall
    }, targetTime);
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
function updateQueueTimerWithLimit(maxSeconds) {
    if (!queueStartTime) return;
    
    const elapsed = Math.floor((Date.now() - queueStartTime) / 1000);
    const current = Math.min(elapsed, maxSeconds);
    const minutes = Math.floor(current / 60);
    const seconds = current % 60;
    
    const timerElement = document.getElementById('queueTimer');
    if (timerElement) {
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (current >= maxSeconds) {
        stopQueueTimer();
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å timeout –æ—á–µ—Ä–µ–¥–∏
function clearQueueTimeout() {
    if (queueTimeout) {
        clearTimeout(queueTimeout);
        queueTimeout = null;
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ó–≤–æ–Ω–∏—Ç—å" –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function resetCallButton() {
    const callBtn = document.getElementById('operatorCallBtn');
    if (callBtn) {
        callBtn.disabled = false;
        callBtn.textContent = 'üìû –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å';
        callBtn.classList.remove('loading');
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å timeout –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞
function clearRedirectTimeout() {
    if (redirectTimeout) {
        clearTimeout(redirectTimeout);
        redirectTimeout = null;
    }
}

// –ö—Ä–∞—Å–∏–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞
function navigateToLeadPage(leadId) {
    const transition = document.getElementById('pageTransition');
    if (transition) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
        transition.classList.add('show');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            window.location.href = `/call.html?leadId=${leadId}`;
        }, 300); // –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    } else {
        // Fallback –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        window.location.href = `/call.html?leadId=${leadId}`;
    }
}

// ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –ó–í–û–ù–ö–ê–ú–ò ======

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ OnlinePBX
async function initiateRealCall(leadId, phoneNumber) {
    try {
        const response = await fetch('/api/telephony/initiate-call', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                leadId: leadId,
                phoneNumber: phoneNumber
            })
        });

        const data = await response.json();
        return data;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'
        };
    }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function startCallMonitoring(callId, leadId) {
    console.log('üìû –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤–æ–Ω–∫–∞:', callId);
    
    const checkInterval = setInterval(async () => {
        try {
            const response = await fetch(`/api/telephony/call-status/${callId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            const data = await response.json();

            if (data.success) {
                console.log('üìû –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞:', data.status);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                updateQueueNotificationText(`–ó–≤–æ–Ω–æ–∫: ${getCallStatusText(data.status)}`);
                
                if (data.status === 'answered') {
                    // –ó–≤–æ–Ω–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞
                    clearInterval(checkInterval);
                    hideQueueNotification();
                    navigateToLeadPage(leadId);
                } else if (data.status === 'failed' || data.status === 'busy' || data.status === 'no_answer') {
                    // –ó–≤–æ–Ω–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è
                    clearInterval(checkInterval);
                    hideQueueNotification();
                    resetCallButton();
                    showNotification('–ó–≤–æ–Ω–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è', 'error');
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
        }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ (30 —Å–µ–∫—É–Ω–¥)
    setTimeout(() => {
        clearInterval(checkInterval);
        hideQueueNotification();
        resetCallButton();
        showNotification('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –∏—Å—Ç–µ–∫–ª–æ', 'warning');
    }, 30000);
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–µ—Å–ª–∏ OnlinePBX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
function startFallbackCall(leadId) {
    console.log('üìû –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞');
    
    // –ñ–¥–µ–º 7 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞
    redirectTimeout = setTimeout(() => {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        const callBtn = document.getElementById('operatorCallBtn');
        if (callBtn) {
            callBtn.disabled = true;
            callBtn.textContent = '‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∏–¥—É...';
            callBtn.classList.add('loading');
        }
        
        hideQueueNotification();
        navigateToLeadPage(leadId);
    }, 7000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function getCallStatusText(status) {
    const statusTexts = {
        'initiated': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
        'ringing': '–ó–≤–æ–Ω–∏–º...',
        'answered': '–°–æ–µ–¥–∏–Ω–µ–Ω–æ',
        'failed': '–ù–µ —É–¥–∞–ª–æ—Å—å',
        'busy': '–ó–∞–Ω—è—Ç–æ',
        'no_answer': '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ
function updateQueueNotificationText(text) {
    const notificationTitle = document.querySelector('.notification-title');
    if (notificationTitle) {
        notificationTitle.textContent = text;
    }
}
