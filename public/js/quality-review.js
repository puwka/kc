let reviewId = null;
let currentUser = null;
let currentLeadId = null;

document.addEventListener('DOMContentLoaded', () => {
    init();
});

async function init() {
    try {
        const params = new URLSearchParams(location.search);
        reviewId = params.get('id');
        
        if (!reviewId) {
            alert('–ù–µ —É–∫–∞–∑–∞–Ω id –ø—Ä–æ–≤–µ—Ä–∫–∏');
            location.href = '/quality.html';
            return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
            location.href = '/login.html';
            return;
        }

        await loadMe(token);
        await loadReview();
        bindEvents();
        loadUserEarnings();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        setTimeout(() => {
            setupUserMenu();
        }, 500);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é...');
            setupUserMenu();
        }, 2000);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let isUnlocked = false;
        
        const unlockReview = () => {
            if (reviewId && !isUnlocked) {
                isUnlocked = true;
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞)
                fetch(`/api/quality/reviews/${reviewId}/unlock`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    }
                }).then(() => {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    if (window.opener && window.opener.loadReviews) {
                        window.opener.loadReviews();
                    }
                }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        };
        
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        window.addEventListener('beforeunload', unlockReview);
        window.addEventListener('unload', unlockReview);
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                unlockReview();
            }
        });
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
        window.addEventListener('pagehide', unlockReview);
    } catch (e) {
        notify('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

async function loadMe(token) {
    const resp = await fetch('/api/auth/me', {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });
    const data = await resp.json();
    currentUser = data.user;
    
    document.getElementById('userName').textContent = currentUser.name;
    
    if (currentUser.role !== 'quality' && currentUser.role !== 'admin') {
        location.href = '/';
    }
}

async function loadReview() {
    showLoader();
    try {
        const resp = await fetch(`/api/quality/reviews/${reviewId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (!resp.ok) {
            if (resp.status === 404) {
                notify('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', 'warning');
                location.href = '/quality.html';
                return;
            }
            throw new Error(`HTTP ${resp.status}: ${resp.statusText}`);
        }
        
        const review = await resp.json();
        renderLead(review);
    } catch (error) {
        console.error('Error loading review:', error);
        notify('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    } finally {
        hideLoader();
    }
}

function renderLead(r) {
    console.log('üéØ renderLead –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', r);
    
    const lead = r.leads || {};
    currentLeadId = r.lead_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ª–∏–¥–∞
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', lead);
    console.log('üìã ID –ª–∏–¥–∞:', currentLeadId);
    
    const details = document.getElementById('leadDetails');
    
    details.innerHTML = `
        <div class="detail-item">
            <div class="detail-label">–ò–º—è:</div>
            <div class="detail-value">${lead.name || '-'}</div>
        </div>
        <div class="detail-item phone">
            <div class="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</div>
            <div class="detail-value">${lead.phone || '-'}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">ID –ª–∏–¥–∞:</div>
            <div class="detail-value">${r.lead_id}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">–ü—Ä–æ–µ–∫—Ç:</div>
            <div class="detail-value">${lead.project || '-'}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">–°—Ç–∞—Ç—É—Å:</div>
            <div class="detail-value">${lead.status || '-'}</div>
        </div>
        <div class="detail-item">
            <div class="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</div>
            <div class="detail-value">${lead.created_at ? new Date(lead.created_at).toLocaleString('ru-RU') : '-'}</div>
        </div>
    `;
    
    console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –ª–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º fillOperatorComment...');
    fillOperatorComment(lead);
    
    loadScriptForLead(lead);
    loadAudioForLead(lead);
}

function fillOperatorComment(lead) {
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', lead);
    console.log('üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–∏–¥–∞:', lead.comment);
    console.log('üìã –¢–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', typeof lead.comment);
    console.log('üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç–æ–π?', !lead.comment);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const textarea = document.getElementById('operatorCommentText');
    const editBtn = document.getElementById('editOperatorCommentBtn');
    
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
    console.log('  - textarea:', !!textarea);
    console.log('  - editBtn:', !!editBtn);
    
    if (textarea) {
        const commentText = lead.comment || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω';
        textarea.value = commentText;
        textarea.readOnly = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        textarea.style.backgroundColor = '#f8f9fa';
        textarea.style.border = '1px solid #dee2e6';
        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω:', commentText);
        console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ textarea –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', textarea.value);
        console.log('‚úÖ textarea.readOnly:', textarea.readOnly);
    } else {
        console.log('‚ùå textarea –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('‚ùå –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ textarea –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
        const allTextareas = document.querySelectorAll('textarea');
        console.log('üìã –ù–∞–π–¥–µ–Ω–æ textarea —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', allTextareas.length);
        allTextareas.forEach((el, index) => {
            console.log(`  ${index}: id="${el.id}", placeholder="${el.placeholder}"`);
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (editBtn) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        editBtn.onclick = null;
        editBtn.removeEventListener('click', toggleOperatorCommentEdit);
        editBtn.removeEventListener('click', saveOperatorComment);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        editBtn.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editBtn.className = 'btn btn-outline btn-sm';
        editBtn.disabled = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        editBtn.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('üñäÔ∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞–∂–∞—Ç–∞');
            toggleOperatorCommentEdit();
        });
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω');
    } else {
        console.log('‚ùå editBtn –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('‚ùå –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
        const allButtons = document.querySelectorAll('button');
        console.log('üìã –ù–∞–π–¥–µ–Ω–æ button —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', allButtons.length);
        allButtons.forEach((el, index) => {
            console.log(`  ${index}: id="${el.id}", text="${el.textContent}"`);
        });
    }
}

function toggleOperatorCommentEdit() {
    const textarea = document.getElementById('operatorCommentText');
    const editBtn = document.getElementById('editOperatorCommentBtn');
    
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
    console.log('üìã textarea:', textarea);
    console.log('üìã editBtn:', editBtn);
    console.log('üìã textarea.readOnly:', textarea.readOnly);
    
    if (textarea.readOnly) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('‚úèÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        textarea.readOnly = false;
        textarea.style.backgroundColor = '#fff';
        textarea.style.border = '1px solid #007bff';
        textarea.focus(); // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
        
        editBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        editBtn.className = 'btn btn-primary btn-sm';
        editBtn.disabled = false;
        editBtn.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Enter';
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        editBtn.onclick = null;
        editBtn.removeEventListener('click', toggleOperatorCommentEdit);
        editBtn.removeEventListener('click', saveOperatorComment);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        editBtn.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('üíæ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
            saveOperatorComment();
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Enter
        textarea.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                e.preventDefault();
                console.log('üíæ Ctrl+Enter –Ω–∞–∂–∞—Ç–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
                saveOperatorComment();
            }
        });
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω');
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        console.log('üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
        textarea.readOnly = true;
        textarea.style.backgroundColor = '#f8f9fa';
        textarea.style.border = '1px solid #dee2e6';
        
        editBtn.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editBtn.className = 'btn btn-outline btn-sm';
        editBtn.disabled = false;
        editBtn.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞';
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        editBtn.onclick = null;
        editBtn.removeEventListener('click', toggleOperatorCommentEdit);
        editBtn.removeEventListener('click', saveOperatorComment);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editBtn.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('üñäÔ∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
            toggleOperatorCommentEdit();
        });
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω');
    }
}

async function saveOperatorComment() {
    try {
        console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');
        
        const commentTextarea = document.getElementById('operatorCommentText');
        const comment = commentTextarea.value;
        
        console.log('üìã ID –ª–∏–¥–∞:', currentLeadId);
        console.log('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);
        console.log('üìù –î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', comment.length);
        
        if (!currentLeadId) {
            console.error('‚ùå ID –ª–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            notify('–û—à–∏–±–∫–∞: ID –ª–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        if (!comment || comment.trim() === '') {
            console.warn('‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç–æ–π');
            notify('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'warning');
            return;
        }
        
        const requestBody = {
            comment: comment.trim()
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', {
            url: `/api/quality/reviews/${reviewId}/operator-comment`,
            method: 'PUT',
            body: requestBody,
            reviewId: reviewId,
            leadId: currentLeadId
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const editBtn = document.getElementById('editOperatorCommentBtn');
        const originalText = editBtn.textContent;
        editBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        editBtn.disabled = true;
        
        const resp = await fetch(`/api/quality/reviews/${reviewId}/operator-comment`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
            status: resp.status,
            statusText: resp.statusText,
            ok: resp.ok
        });
        
        if (!resp.ok) {
            const errorText = await resp.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${resp.status} ${errorText}`);
        }
        
        const result = await resp.json();
        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ textarea —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        const savedComment = result.lead?.comment || result.comment || comment.trim();
        commentTextarea.value = savedComment;
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ textarea:', commentTextarea.value);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        notify('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        editBtn.textContent = originalText;
        editBtn.disabled = false;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        toggleOperatorCommentEdit();
        
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', e);
        notify(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`, 'error');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const editBtn = document.getElementById('editOperatorCommentBtn');
        editBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        editBtn.disabled = false;
    }
}

async function loadScriptForLead(lead) {
    const box = document.getElementById('scriptContent');
    
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ª–∏–¥–∞:', {
        name: lead.name,
        project: lead.project
    });
    
    if (!lead.project) {
        box.innerHTML = `
            <div class="script-placeholder">
                <p>‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω</p>
                <p>–°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</p>
            </div>
        `;
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        box.innerHTML = `
            <div class="script-loading">
                <p>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${lead.project}"...</p>
            </div>
        `;
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        const projectName = encodeURIComponent(lead.project);
        const url = `/api/scripts/by-project/${projectName}`;
        
        console.log('üì§ –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–ø—Ç–æ–≤:', {
            project: lead.project,
            encodedProject: projectName,
            url: url
        });
        
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: ${response.status}`);
        }
        
        const scripts = await response.json();
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã:', scripts);
        
        if (!scripts || scripts.length === 0) {
            box.innerHTML = `
                <div class="script-placeholder">
                    <p>üìù –°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <p>–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${lead.project}" –Ω–µ —Å–æ–∑–¥–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã</p>
                </div>
            `;
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        let scriptsHtml = `
            <div class="script-header">
                <h4>üìã –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${lead.project}"</h4>
                <p>–ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: ${scripts.length}</p>
            </div>
        `;
        
        scripts.forEach((script, index) => {
            scriptsHtml += `
                <div class="script-item">
                    <div class="script-title">
                        <strong>${script.title || `–°–∫—Ä–∏–ø—Ç ${index + 1}`}</strong>
                        <span class="script-date">${new Date(script.created_at).toLocaleDateString('ru-RU')}</span>
                    </div>
                    <div class="script-content">
                        <pre>${script.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</pre>
                    </div>
                </div>
            `;
        });
        
        box.innerHTML = scriptsHtml;
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
        box.innerHTML = `
            <div class="script-error">
                <p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤</p>
                <p>${error.message}</p>
            </div>
        `;
    }
}

function loadAudioForLead(lead) {
    const src = document.getElementById('audioSource');
    const audio = document.getElementById('callAudio');
    
    src.src = lead.record_url || '';
    if (!src.src) {
        audio.style.display = 'none';
    }
    audio.load();
}

function bindEvents() {
    document.getElementById('logoutBtn').addEventListener('click', () => {
        localStorage.clear();
        location.href = '/login.html';
    });
    
    document.getElementById('approveBtn').addEventListener('click', () => saveDecision('approve'));
    document.getElementById('rejectBtn').addEventListener('click', () => saveDecision('reject'));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö —Å–ø–∏—Å–∫—É"
    const backButton = document.querySelector('a[href="/quality.html"]');
    if (backButton) {
        backButton.addEventListener('click', (e) => {
            e.preventDefault();
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            if (reviewId) {
                fetch(`/api/quality/reviews/${reviewId}/unlock`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    }
                }).then(() => {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    if (window.opener && window.opener.loadReviews) {
                        window.opener.loadReviews();
                    }
                    location.href = '/quality.html';
                }).catch(() => {
                    location.href = '/quality.html';
                });
            } else {
                location.href = '/quality.html';
            }
        });
    }
}

async function saveDecision(action) {
    try {
        showLoader();
        const comment = document.getElementById('commentText').value;
        
        const url = action === 'approve' 
            ? `/api/quality/reviews/${reviewId}/approve`
            : `/api/quality/reviews/${reviewId}/reject`;
            
        const resp = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ comment })
        });
        
        if (!resp.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è');
        }
        
        notify('–†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', 'success');
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        if (reviewId) {
            fetch(`/api/quality/reviews/${reviewId}/unlock`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            }).then(() => {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if (window.opener && window.opener.loadReviews) {
                    window.opener.loadReviews();
                }
            }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
        setTimeout(() => location.href = '/quality.html', 600);
    } catch (e) {
        notify(e.message, 'error');
    } finally {
        hideLoader();
    }
}

function showLoader() {
    const o = document.getElementById('loaderOverlay');
    o.style.display = 'flex';
    setTimeout(() => o.classList.add('show'), 10);
}

function hideLoader() {
    const o = document.getElementById('loaderOverlay');
    o.classList.remove('show');
    setTimeout(() => o.style.display = 'none', 300);
}

function notify(message, type = 'info') {
    console.log('üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { message, type });
    
    const box = document.getElementById('notifications');
    if (!box) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const el = document.createElement('div');
    el.className = `notification ${type}`;
    el.textContent = message;
    el.style.display = 'block';
    el.style.opacity = '1';
    
    box.appendChild(el);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM:', el);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (el.parentNode) {
            el.style.opacity = '0';
            el.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (el.parentNode) {
                    el.remove();
                    console.log('üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
                }
            }, 300);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
function setupUserMenu() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é...');
  
  const checkElements = () => {
    const userName = document.getElementById('userName');
    const userDropdown = document.getElementById('userDropdown');
    
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', { userName: !!userName, userDropdown: !!userDropdown });
    
    if (!userName || !userDropdown) {
      console.log('‚è≥ –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 100–º—Å...');
      setTimeout(checkElements, 100);
      return;
    }
    
    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
      userName: userName,
      userDropdown: userDropdown,
      userNameText: userName.textContent,
      userDropdownDisplay: userDropdown.style.display
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    userName.onclick = null;
    userName.onmousedown = null;
    userName.onmouseup = null;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    userName.onclick = function(e) {
      console.log('üëÜ –ö–ª–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      e.preventDefault();
      e.stopPropagation();
      
      const currentDisplay = userDropdown.style.display;
      console.log('üìä –¢–µ–∫—É—â–∏–π display:', currentDisplay);
      
      if (currentDisplay === 'block' || currentDisplay === '') {
        userDropdown.style.display = 'none';
        console.log('‚ùå –ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ');
      } else {
        userDropdown.style.display = 'block';
        console.log('‚úÖ –ú–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ');
      }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.onclick = function(e) {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        e.preventDefault();
        e.stopPropagation();
        localStorage.clear();
        window.location.href = '/login.html';
      };
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.onclick = function(e) {
      if (!userName.contains(e.target) && !userDropdown.contains(e.target)) {
        userDropdown.style.display = 'none';
        console.log('üëÜ –ö–ª–∏–∫ –≤–Ω–µ –º–µ–Ω—é, —Å–∫—Ä—ã–≤–∞–µ–º');
      }
    };
    
    console.log('üéâ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  };
  
  checkElements();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserEarnings() {
  try {
    const resp = await fetch('/api/quality/overview', {
      headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
    });
    
    if (!resp.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞');
    }
    
    const data = await resp.json();
    updateHeaderEarnings(data.earnings || 0);
  } catch (e) {
    console.error('Error loading user earnings:', e);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —à–∞–ø–∫–µ
function updateHeaderEarnings(earnings) {
  const userEarnings = document.getElementById('userEarnings');
  if (userEarnings) {
    userEarnings.textContent = (earnings || 0).toFixed(2) + ' ‚ÇΩ';
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω—é (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.testMenu = function() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é...');
  const userName = document.getElementById('userName');
  const userDropdown = document.getElementById('userDropdown');
  
  console.log('–≠–ª–µ–º–µ–Ω—Ç—ã:', { userName: !!userName, userDropdown: !!userDropdown });
  
  if (userName && userDropdown) {
    console.log('–¢–µ–∫—É—â–∏–π display:', userDropdown.style.display);
    userDropdown.style.display = userDropdown.style.display === 'block' ? 'none' : 'block';
    console.log('–ù–æ–≤—ã–π display:', userDropdown.style.display);
  } else {
    console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
  }
};