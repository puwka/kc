// ====== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ======
let currentUser = null;
let isInitialized = false;
let queueStatsInterval = null;
let analyticsInterval = null;

// ====== –£—Ç–∏–ª–∏—Ç—ã ======

function notify(message, type = 'info') {
  const box = document.getElementById('notifications');
  if (!box) {
    return;
  }
  
  const el = document.createElement('div');
  el.className = `notification ${type}`;
  el.textContent = message;
  el.setAttribute('role', 'alert');
  el.setAttribute('aria-live', 'polite');
  
  box.appendChild(el);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (el.parentNode) {
      el.style.opacity = '0';
      el.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (el.parentNode) {
          el.remove();
        }
      }, 300);
    }
  }, 3000);
}

// ====== –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö ======

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
async function getNextReview() {
  const btn = document.getElementById('getNextReviewBtn');
  if (!btn) {
    return;
  }
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
  if (btn.disabled) {
    return;
  }
  
  try {
    btn.classList.add('loading');
    btn.disabled = true;
    btn.textContent = '‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏...';

    const token = localStorage.getItem('token');
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const response = await fetch('/api/quality/next-review', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();

    if (!data.success) {
      notify(data.message || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
      return;
    }

    if (!data.review || !data.review.id) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    loadQueueStats();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏
    window.location.href = `/quality-review.html?id=${data.review.id}`;
    
  } catch (error) {
    notify(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏', 'error');
  } finally {
    btn.classList.remove('loading');
    btn.disabled = false;
    btn.textContent = 'üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É';
  }
}


// –û—Å–≤–æ–±–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
async function releaseOperator() {
  try {
    const response = await fetch('/api/quality/release-operator', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    });

    if (!response.ok) {
      const data = await response.json();
      notify(data.error || '–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'error');
      return;
    }

    notify('–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', 'success');

  } catch (error) {
    notify('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'error');
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.getNextReview = getNextReview;
window.releaseOperator = releaseOperator;
window.notify = notify;


// ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======

async function init() {
  if (isInitialized) {
    return;
  }
  
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/login.html';
      return;
    }
    
    await loadMe(token);
    setupUI();
    bindEvents();
    loadAnalytics();
    loadQueueStats();
    setupStickyHeader();
    initMobileOptimizations();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    addOperatorToQueue();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    setupPeriodicUpdates();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    isInitialized = true;
    
  } catch (error) {
    notify('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
  }
}

function setupPeriodicUpdates() {
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  if (queueStatsInterval) {
    clearInterval(queueStatsInterval);
  }
  if (analyticsInterval) {
    clearInterval(analyticsInterval);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  queueStatsInterval = setInterval(() => {
    loadQueueStats();
  }, 30 * 1000);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  analyticsInterval = setInterval(() => {
    loadAnalytics();
  }, 5 * 60 * 1000);
}

function setupEventListeners() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      loadQueueStats();
      loadAnalytics();
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –æ–∫–Ω–µ
  window.addEventListener('focus', () => {
    loadQueueStats();
    loadAnalytics();
  });
}

function cleanup() {
  if (queueStatsInterval) {
    clearInterval(queueStatsInterval);
    queueStatsInterval = null;
  }
  if (analyticsInterval) {
    clearInterval(analyticsInterval);
    analyticsInterval = null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', init);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(() => {
  setupUserMenu();
}, 2000);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function addOperatorToQueue() {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      return;
    }
    
    const response = await fetch('/api/quality/add-operator', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
}

function setupUI(){
  document.getElementById('navUser').style.display='flex';
  document.getElementById('userName').textContent=currentUser.name;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É
  setupUserMenu();
}

function setupUserMenu() {
  // –ñ–¥–µ–º –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è
  const checkElements = () => {
    const userName = document.getElementById('userName');
    const userDropdown = document.getElementById('userDropdown');
    
    if (!userName || !userDropdown) {
      setTimeout(checkElements, 100);
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    userName.onclick = null;
    userName.onmousedown = null;
    userName.onmouseup = null;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    userName.onclick = function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (userDropdown.style.display === 'block' || userDropdown.style.display === '') {
        userDropdown.style.display = 'none';
      } else {
        userDropdown.style.display = 'block';
      }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.onclick = async function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        try {
          // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö
          await fetch('/api/quality/remove-operator', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`,
              'Content-Type': 'application/json'
            }
          });
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã—Ö–æ–¥ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        }
        
        localStorage.clear();
        window.location.href = '/login.html';
      };
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.onclick = function(e) {
      if (!userName.contains(e.target) && !userDropdown.contains(e.target)) {
        userDropdown.style.display = 'none';
      }
    };
  };
  
  checkElements();
}


async function loadAnalytics() {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      return;
    }
    
    const resp = await fetch('/api/quality/overview', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!resp.ok) {
      throw new Error(`HTTP ${resp.status}: ${resp.statusText}`);
    }
    
    const stats = await resp.json();
    if (!stats) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    renderAnalytics(stats);
    
  } catch (e) {
    notify(e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'error');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
async function loadQueueStats() {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await addOperatorToQueue();
    
    const resp = await fetch('/api/quality/queue-stats', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!resp.ok) {
      throw new Error(`HTTP ${resp.status}: ${resp.statusText}`);
    }
    
    const stats = await resp.json();
    if (!stats) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    renderQueueStats(stats);
    
  } catch (e) {
    notify('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ' + e.message, 'error');
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
function renderQueueStats(stats) {
  if (!stats || typeof stats !== 'object') {
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
  const totalPendingEl = document.getElementById('totalPending');
  if (totalPendingEl) {
    totalPendingEl.textContent = stats.total_pending || 0;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ
  const totalOperatorsEl = document.getElementById('totalOperators');
  if (totalOperatorsEl) {
    totalOperatorsEl.textContent = stats.total_operators_on_shift || 0;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  const availableOperatorsEl = document.getElementById('availableOperators');
  if (availableOperatorsEl) {
    availableOperatorsEl.textContent = stats.total_available_operators || 0;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É
  const oldestPendingEl = document.getElementById('oldestPending');
  if (oldestPendingEl) {
    if (stats.oldest_pending_review) {
      try {
        const date = new Date(stats.oldest_pending_review);
        const now = new Date();
        const diffMinutes = Math.floor((now - date) / (1000 * 60));
        
        if (isNaN(diffMinutes) || diffMinutes < 0) {
          oldestPendingEl.textContent = '‚Äî';
        } else if (diffMinutes < 60) {
          oldestPendingEl.textContent = `${diffMinutes} –º–∏–Ω`;
        } else if (diffMinutes < 1440) {
          const hours = Math.floor(diffMinutes / 60);
          oldestPendingEl.textContent = `${hours} —á`;
        } else {
          const days = Math.floor(diffMinutes / 1440);
          oldestPendingEl.textContent = `${days} –¥–Ω`;
        }
      } catch (error) {
        oldestPendingEl.textContent = '‚Äî';
      }
    } else {
      oldestPendingEl.textContent = '‚Äî';
    }
  }
}



function renderAnalytics(s) {
  const box = document.getElementById('analyticsSection');
  if (!box) {
    return;
  }
  
  if (!s || typeof s !== 'object') {
    return;
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  const called = Number(s.processed) || 0;
  const success = Number(s.approved) || 0;
  const conversionRate = Number(s.conversion_rate) || 0;
  const conversion = `${(conversionRate * 100).toFixed(1)}%`;
  const earnings = `${(Number(s.earnings) || 0).toFixed(2)} ‚ÇΩ`;
  const earningsToday = `${(Number(s.earningsToday) || 0).toFixed(2)} ‚ÇΩ`;
  const avgReviewMinutes = Number(s.avg_review_minutes) || 0;
  const avgPendingWaitMinutes = Number(s.avg_pending_wait_minutes) || 0;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —à–∞–ø–∫–µ
  updateHeaderEarnings(Number(s.earnings) || 0);
  
  // –°–æ–∑–¥–∞–µ–º HTML —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ XSS
  const safeHTML = `
    <div class="stat-card">
      <div class="stat-value">${called}</div>
      <div class="stat-label">–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${success}</div>
      <div class="stat-label">–û–¥–æ–±—Ä–µ–Ω–æ</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${conversion}</div>
      <div class="stat-label">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${earnings}</div>
      <div class="stat-label">–ó–∞—Ä–∞–±–æ—Ç–æ–∫</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${earningsToday}</div>
      <div class="stat-label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${avgReviewMinutes} –º–∏–Ω</div>
      <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
    </div>
    <div class="stat-card">
      <div class="stat-value">${avgPendingWaitMinutes} –º–∏–Ω</div>
      <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏</div>
    </div>`;
  
  box.innerHTML = safeHTML;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —à–∞–ø–∫–µ
function updateHeaderEarnings(earnings) {
  const userEarnings = document.getElementById('userEarnings');
  if (userEarnings) {
    userEarnings.textContent = (earnings || 0).toFixed(2) + ' ‚ÇΩ';
  }
}

function bindEvents(){
  document.getElementById('getNextReviewBtn').addEventListener('click', getNextReview);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
  setTimeout(() => {
    setupUserMenu();
  }, 500);
}


async function loadMe(token){
  const resp=await fetch('/api/auth/me',{headers:{'Authorization':`Bearer ${token}`}});
  
  if (resp.status === 401) {
    localStorage.removeItem('token');
    window.location.href = '/';
    return;
  }
  
  const data=await resp.json();
  currentUser=data.user;
  if(currentUser.role!=='quality'&&currentUser.role!=='admin'){window.location.href='/';}
}





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∞–ø–∫–∏
function setupStickyHeader() {
  const navbar = document.querySelector('.navbar');
  if (!navbar) return;
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ - —à–∞–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
}

// –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
function initMobileOptimizations() {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  const buttons = document.querySelectorAll('button, .user-name, .dropdown-item');
  buttons.forEach(button => {
    button.addEventListener('touchstart', function(e) {
      e.preventDefault();
    }, { passive: false });
  });
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ touch —Å–æ–±—ã—Ç–∏–π
  const touchElements = document.querySelectorAll('.review-btn, .status-btn, .comment-btn');
  touchElements.forEach(element => {
    element.addEventListener('touchstart', function() {
      this.style.transform = 'scale(0.98)';
    });
    
    element.addEventListener('touchend', function() {
      this.style.transform = 'scale(1)';
    });
    
    element.addEventListener('touchcancel', function() {
      this.style.transform = 'scale(1)';
    });
  });
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  let isScrolling = false;
  window.addEventListener('scroll', function() {
    if (!isScrolling) {
      window.requestAnimationFrame(function() {
        // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        isScrolling = false;
      });
      isScrolling = true;
    }
  }, { passive: true });
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ —Å–≤–∞–π–ø–µ
  let startY = 0;
  window.addEventListener('touchstart', function(e) {
    startY = e.touches[0].clientY;
  }, { passive: true });
  
  window.addEventListener('touchmove', function(e) {
    const currentY = e.touches[0].clientY;
    const diffY = startY - currentY;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–∞–π–ø–∞–µ—Ç –≤–≤–µ—Ä—Ö –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (diffY < 0 && window.scrollY === 0) {
      e.preventDefault();
    }
  }, { passive: false });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        getNextReview,
        releaseOperator,
        notify,
        loadAnalytics,
        loadQueueStats
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
  init();
  initMobileOptimizations();
});



