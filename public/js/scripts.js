// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let projects = [];
let scripts = [];
let currentEditingScript = null;
let currentEditingProject = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    checkAuth();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuth() {
    const token = localStorage.getItem('token');
    if (!token) {
        window.location.href = '/login.html';
        return;
    }

    try {
        const response = await fetch('/api/profile', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        }

        const user = await response.json();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        if (user.role !== 'admin') {
            showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error');
            setTimeout(() => {
                window.location.href = '/';
            }, 2000);
            return;
        }

        document.getElementById('userName').textContent = user.name || user.email;
        document.getElementById('navUser').style.display = 'flex';
        await loadData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error');
        setTimeout(() => {
            window.location.href = '/login.html';
        }, 2000);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    try {
        showLoader();
        await Promise.all([
            loadProjects(),
            loadScripts()
        ]);
        updateStats();
        setupEventListeners();
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        hideLoader();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
async function loadProjects() {
    try {
        const response = await fetch('/api/scripts/projects', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
        }

        projects = await response.json();
        renderProjects();
        updateProjectFilter();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
async function loadScripts() {
    try {
        const response = await fetch('/api/scripts/scripts', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤');
        }

        scripts = await response.json();
        renderScripts();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
function renderProjects() {
    const container = document.getElementById('projectsList');
    
    if (projects.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="icon">üìÅ</div>
                <h3>–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤</p>
            </div>
        `;
        return;
    }

    container.innerHTML = projects.map(project => `
        <div class="project-card">
            <h4>${project.name}</h4>
            <p>${project.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            <div class="project-actions">
                <button onclick="editProject(${project.id})" class="btn btn-warning">
                    <i class="icon">‚úèÔ∏è</i>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button onclick="deleteProject(${project.id})" class="btn btn-danger">
                    <i class="icon">üóëÔ∏è</i>
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
function renderScripts() {
    const container = document.getElementById('scriptsList');
    const projectFilter = document.getElementById('projectFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const searchTerm = document.getElementById('searchScripts').value.toLowerCase();
    
    let filteredScripts = scripts;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    if (projectFilter) {
        filteredScripts = filteredScripts.filter(script => script.projects.id == projectFilter);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter) {
        const isActive = statusFilter === 'active';
        filteredScripts = filteredScripts.filter(script => script.is_active === isActive);
    }
    
    // –ü–æ–∏—Å–∫
    if (searchTerm) {
        filteredScripts = filteredScripts.filter(script => 
            script.title.toLowerCase().includes(searchTerm) ||
            script.content.toLowerCase().includes(searchTerm) ||
            script.projects.name.toLowerCase().includes(searchTerm)
        );
    }
    
    if (filteredScripts.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="icon">üìù</div>
                <h3>–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
            </div>
        `;
        return;
    }

    container.innerHTML = filteredScripts.map(script => `
        <div class="script-card">
            <div class="script-project">${script.projects.name}</div>
            <h4>${script.title}</h4>
            <div class="script-preview">
                ${script.content.substring(0, 200)}${script.content.length > 200 ? '...' : ''}
            </div>
            <div class="script-actions">
                <button onclick="editScript(${script.id})" class="btn btn-warning">
                    <i class="icon">‚úèÔ∏è</i>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button onclick="deleteScript(${script.id})" class="btn btn-danger">
                    <i class="icon">üóëÔ∏è</i>
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
function updateProjectFilter() {
    const select = document.getElementById('projectFilter');
    select.innerHTML = '<option value="">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>' +
        projects.map(project => `<option value="${project.id}">${project.name}</option>`).join('');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    document.getElementById('addProjectBtn').addEventListener('click', () => {
        openProjectModal();
    });

    document.getElementById('addScriptBtn').addEventListener('click', () => {
        openScriptModal();
    });

    // –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refreshProjectsBtn').addEventListener('click', loadProjects);
    document.getElementById('refreshScriptsBtn').addEventListener('click', loadScripts);

    // –§–∏–ª—å—Ç—Ä—ã
    document.getElementById('projectFilter').addEventListener('change', renderScripts);
    document.getElementById('statusFilter').addEventListener('change', renderScripts);
    document.getElementById('searchScripts').addEventListener('input', renderScripts);

    // –§–æ—Ä–º—ã
    document.getElementById('projectForm').addEventListener('submit', handleProjectSubmit);
    document.getElementById('scriptForm').addEventListener('submit', handleScriptSubmit);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
function openProjectModal(project = null) {
    const modal = document.getElementById('projectModal');
    const form = document.getElementById('projectForm');
    const title = document.getElementById('projectModalTitle');
    
    if (project) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
        document.getElementById('projectName').value = project.name;
        document.getElementById('projectDescription').value = project.description || '';
        currentEditingProject = project;
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç';
        form.reset();
        currentEditingProject = null;
    }
    
    modal.style.display = 'block';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞
function openScriptModal(script = null) {
    const modal = document.getElementById('scriptModal');
    const form = document.getElementById('scriptForm');
    const title = document.getElementById('scriptModalTitle');
    const projectSelect = document.getElementById('scriptProject');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
    projectSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç</option>' +
        projects.map(project => `<option value="${project.id}">${project.name}</option>`).join('');
    
    if (script) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç';
        document.getElementById('scriptTitle').value = script.title;
        document.getElementById('scriptContent').value = script.content;
        projectSelect.value = script.project_id;
        currentEditingScript = script;
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç';
        form.reset();
        currentEditingScript = null;
    }
    
    modal.style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∞
async function handleProjectSubmit(e) {
    e.preventDefault();
    
    const formData = {
        name: document.getElementById('projectName').value,
        description: document.getElementById('projectDescription').value
    };

    try {
        showLoader();
        
        const url = currentEditingProject ? 
            `/api/scripts/projects/${currentEditingProject.id}` : 
            '/api/scripts/projects';
        const method = currentEditingProject ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
        }

        showNotification(
            currentEditingProject ? '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 
            'success'
        );
        closeModal('projectModal');
        await loadProjects();
        updateStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å–∫—Ä–∏–ø—Ç–∞
async function handleScriptSubmit(e) {
    e.preventDefault();
    
    const formData = {
        project_id: parseInt(document.getElementById('scriptProject').value),
        title: document.getElementById('scriptTitle').value,
        content: document.getElementById('scriptContent').value
    };

    try {
        showLoader();
        
        const url = currentEditingScript 
            ? `/api/scripts/scripts/${currentEditingScript.id}`
            : '/api/scripts/scripts';
        
        const method = currentEditingScript ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞');
        }

        showNotification(
            currentEditingScript ? '–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 
            'success'
        );
        closeModal('scriptModal');
        await loadScripts();
        updateStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
function editProject(projectId) {
    const project = projects.find(p => p.id === projectId);
    if (project) {
        openProjectModal(project);
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
function editScript(scriptId) {
    const script = scripts.find(s => s.id === scriptId);
    if (script) {
        openScriptModal(script);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
async function deleteProject(projectId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        return;
    }

    try {
        showLoader();
        
        const response = await fetch(`/api/scripts/projects/${projectId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
        }

        showNotification('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
        await loadProjects();
        updateStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
async function deleteScript(scriptId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç?')) {
        return;
    }

    try {
        showLoader();
        
        const response = await fetch(`/api/scripts/scripts/${scriptId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞');
        }

        showNotification('–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
        await loadScripts();
        updateStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    localStorage.removeItem('token');
    window.location.href = '/login.html';
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('projectsCount').textContent = projects.length;
    document.getElementById('scriptsCount').textContent = scripts.length;
    document.getElementById('activeScriptsCount').textContent = scripts.filter(s => s.is_active).length;
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
function showLoader() {
    document.body.classList.add('loading');
}

function hideLoader() {
    document.body.classList.remove('loading');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
function insertTag(tag) {
    const textarea = document.getElementById('scriptContent');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    
    let newText = '';
    if (tag === 'br') {
        newText = '<br>';
    } else {
        newText = `<${tag}>${selectedText || '–¢–µ–∫—Å—Ç'}</${tag}>`;
    }
    
    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
    textarea.value = newValue;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
    const newCursorPos = start + newText.length;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    textarea.focus();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
function editProject(projectId) {
    const project = projects.find(p => p.id === projectId);
    if (project) {
        currentEditingProject = project;
        openProjectModal(project);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}
