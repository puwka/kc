const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–æ–≤
const testLeads = [
    // –ö—Ä–µ–¥–∏—Ç—ã (5 –ª–∏–¥–æ–≤)
    { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤', phone: '+7-900-123-4567', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', phone: '+7-900-234-5678', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', phone: '+7-900-345-6789', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞', phone: '+7-900-456-7890', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤', phone: '+7-900-567-8901', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    
    // –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (5 –ª–∏–¥–æ–≤)
    { name: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞', phone: '+7-900-678-9012', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–°–µ—Ä–≥–µ–π –õ–µ–±–µ–¥–µ–≤', phone: '+7-900-789-0123', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–¢–∞—Ç—å—è–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞', phone: '+7-900-890-1234', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ê–Ω–¥—Ä–µ–π –ü–æ–ø–æ–≤', phone: '+7-900-901-2345', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ù–∞—Ç–∞–ª—å—è –§–µ–¥–æ—Ä–æ–≤–∞', phone: '+7-900-012-3456', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    
    // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (5 –ª–∏–¥–æ–≤)
    { name: '–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤', phone: '+7-900-111-2222', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', phone: '+7-900-222-3333', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ú–∏—Ö–∞–∏–ª –û—Ä–ª–æ–≤', phone: '+7-900-333-4444', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ê–Ω–Ω–∞ –ó–∞–π—Ü–µ–≤–∞', phone: '+7-900-444-5555', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ü–∞–≤–µ–ª –°–º–∏—Ä–Ω–æ–≤', phone: '+7-900-555-6666', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    
    // –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (5 –ª–∏–¥–æ–≤)
    { name: '–Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞', phone: '+7-900-666-7777', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–†–æ–º–∞–Ω –í–∞—Å–∏–ª—å–µ–≤', phone: '+7-900-777-8888', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–ò—Ä–∏–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∞', phone: '+7-900-888-9999', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–ê–ª–µ–∫—Å–µ–π –ì–æ–ª—É–±–µ–≤', phone: '+7-900-999-0000', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ—Ä–æ–±—å–µ–≤–∞', phone: '+7-900-000-1111', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' }
];

async function addTestLeads() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–æ–≤
        const { data: operators, error: operatorsError } = await supabase
            .from('profiles')
            .select('id, name, role')
            .in('role', ['operator', 'supervisor', 'admin'])
            .limit(5);

        if (operatorsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', operatorsError);
            return;
        }

        if (!operators || operators.length === 0) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${operators.length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–æ–≤`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–æ–≤
        const leadsToInsert = testLeads.map((lead, index) => ({
            name: lead.name,
            phone: lead.phone,
            project: lead.project,
            status: lead.status,
            assigned_to: operators[index % operators.length].id, // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
            created_at: new Date().toISOString()
        }));

        const { data: insertedLeads, error: insertError } = await supabase
            .from('leads')
            .insert(leadsToInsert)
            .select('id, name, phone, project, status, assigned_to');

        if (insertError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤:', insertError);
            return;
        }

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤:');
        console.log('');

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        const groupedByProject = insertedLeads.reduce((acc, lead) => {
            if (!acc[lead.project]) {
                acc[lead.project] = [];
            }
            acc[lead.project].push(lead);
            return acc;
        }, {});

        Object.entries(groupedByProject).forEach(([project, leads]) => {
            console.log(`üìÅ ${project} (${leads.length} –ª–∏–¥–æ–≤):`);
            leads.forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name} - ${lead.phone} (ID: ${lead.id})`);
            });
            console.log('');
        });

        console.log('üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º:');
        const operatorStats = insertedLeads.reduce((acc, lead) => {
            const operatorId = lead.assigned_to;
            if (!acc[operatorId]) {
                acc[operatorId] = 0;
            }
            acc[operatorId]++;
            return acc;
        }, {});

        Object.entries(operatorStats).forEach(([operatorId, count]) => {
            const operator = operators.find(op => op.id === operatorId);
            console.log(`   ‚Ä¢ ${operator?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${operator?.role}): ${count} –ª–∏–¥–æ–≤`);
        });

        console.log('');
        console.log('üéâ –í—Å–µ –ª–∏–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
        console.log('üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏ —Ä–∞–±–æ—Ç—É –û–ö–ö');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addTestLeads();
