const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testBalanceSync() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
        const { data: operators, error: operatorsError } = await supabase
            .from('user_balance')
            .select('user_id, balance, total_earned')
            .limit(1);

        if (operatorsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', operatorsError);
            return;
        }

        if (!operators || operators.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const operator = operators[0];
        console.log('üë§ –ù–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä:');
        console.log(`   ‚Ä¢ User ID: ${operator.user_id}`);
        console.log(`   ‚Ä¢ Balance: ${operator.balance}‚ÇΩ`);
        console.log(`   ‚Ä¢ Total Earned: ${operator.total_earned}‚ÇΩ`);
        console.log('');

        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ—Ñ–∏–ª—è...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—ç–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å)
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', operator.user_id)
            .single();

        if (profileError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
            return;
        }

        console.log(`   ‚Ä¢ Profile Name: ${profile.name}`);
        console.log(`   ‚Ä¢ Profile Email: ${profile.email}`);
        console.log('');

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è...');
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/profile/stats
        const { data: leads, error: leadsError } = await supabase
            .from('leads')
            .select('status, created_at')
            .eq('assigned_to', operator.user_id);

        if (leadsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:', leadsError);
            return;
        }

        const stats = {
            total: leads.length,
            new: leads.filter(lead => lead.status === 'new').length,
            in_work: leads.filter(lead => lead.status === 'in_work').length,
            success: leads.filter(lead => lead.status === 'success').length,
            fail: leads.filter(lead => lead.status === 'fail').length
        };

        const processed = stats.in_work + stats.success + stats.fail;
        stats.conversion_rate = processed > 0 ? 
            Math.round((stats.success / processed) * 100) : 0;

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: balanceData, error: balanceError } = await supabase
            .from('user_balance')
            .select('balance, total_earned')
            .eq('user_id', operator.user_id)
            .single();

        if (balanceError) {
            console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            stats.earnings = 0;
            stats.balance = 0;
            stats.total_earned = 0;
        } else {
            stats.earnings = balanceData?.total_earned || 0;
            stats.balance = balanceData?.balance || 0;
            stats.total_earned = balanceData?.total_earned || 0;
        }

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:');
        console.log(`   ‚Ä¢ Total Leads: ${stats.total}`);
        console.log(`   ‚Ä¢ Processed: ${processed}`);
        console.log(`   ‚Ä¢ Success: ${stats.success}`);
        console.log(`   ‚Ä¢ Fail: ${stats.fail}`);
        console.log(`   ‚Ä¢ Conversion Rate: ${stats.conversion_rate}%`);
        console.log(`   ‚Ä¢ Earnings: ${stats.earnings}‚ÇΩ`);
        console.log(`   ‚Ä¢ Balance: ${stats.balance}‚ÇΩ`);
        console.log(`   ‚Ä¢ Total Earned: ${stats.total_earned}‚ÇΩ`);
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...');
        
        const realBalance = operator.balance;
        const realTotalEarned = operator.total_earned;
        
        console.log(`   ‚Ä¢ Real Balance: ${realBalance}‚ÇΩ`);
        console.log(`   ‚Ä¢ Stats Balance: ${stats.balance}‚ÇΩ`);
        console.log(`   ‚Ä¢ Real Total Earned: ${realTotalEarned}‚ÇΩ`);
        console.log(`   ‚Ä¢ Stats Total Earned: ${stats.total_earned}‚ÇΩ`);
        
        if (realBalance === stats.balance && realTotalEarned === stats.total_earned) {
            console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        } else {
            console.log('‚ùå –ë–∞–ª–∞–Ω—Å—ã –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        }

        console.log('');
        console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBalanceSync();
