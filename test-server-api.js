// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–∞–ø—Ä—è–º—É—é
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testServerAPI() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API...\n');

        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
        console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
            const response = await fetch('http://localhost:3000/');
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å:', response.status);
        } catch (error) {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', error.message);
            return;
        }

        // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
        try {
            const response = await fetch('http://localhost:3000/api/balance/balance');
            console.log('–°—Ç–∞—Ç—É—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞:', response.status);
            
            if (response.status === 401) {
                console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            } else if (response.status === 500) {
                const errorText = await response.text();
                console.log('‚ùå –û—à–∏–±–∫–∞ 500:', errorText);
            } else {
                console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', response.status);
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        }

        // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–∞–ª–∞–Ω—Å–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
        try {
            const response = await fetch('http://localhost:3000/api/balance/balance', {
                headers: {
                    'Authorization': 'Bearer invalid-token'
                }
            });
            console.log('–°—Ç–∞—Ç—É—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:', response.status);
            
            if (response.status === 401) {
                console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π');
            } else if (response.status === 500) {
                const errorText = await response.text();
                console.log('‚ùå –û—à–∏–±–∫–∞ 500:', errorText);
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        }

        console.log('\nüìã –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É 500, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ');

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

testServerAPI();
