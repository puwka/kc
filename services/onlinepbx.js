const axios = require('axios');
const onlinepbxConfig = require('../config/onlinepbx');

class OnlinePBXService {
    constructor() {
        this.apiUrl = onlinepbxConfig.apiUrl;
        this.headers = onlinepbxConfig.getHeaders();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
    async initiateCall(operatorId, phoneNumber, leadId) {
        try {
            console.log('üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ OnlinePBX:', {
                operatorId,
                phoneNumber,
                leadId
            });

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const formattedPhone = this.formatPhoneNumber(phoneNumber);
            
            const callData = {
                // –ò—Å—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä (–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
                from: onlinepbxConfig.callSettings.operatorNumber,
                // –í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä (–Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞)
                to: formattedPhone,
                // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                timeout: onlinepbxConfig.callSettings.ringTimeout,
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params: {
                    lead_id: leadId,
                    operator_id: operatorId,
                    // Callback URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∑–≤–æ–Ω–∫–∞
                    callback_url: `${process.env.APP_URL || 'http://localhost:3000'}/api/telephony/callback`
                }
            };

            console.log('üìû –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:', callData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–æ–Ω–∫–∞
            const response = await axios.post(`${this.apiUrl}/calls/initiate`, callData, {
                headers: this.headers,
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', response.data);

            return {
                success: true,
                callId: response.data.call_id,
                status: response.data.status,
                message: '–ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
            
            return {
                success: false,
                error: error.response?.data?.message || error.message,
                message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞'
            };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    async getCallStatus(callId) {
        try {
            const response = await axios.get(`${this.apiUrl}/calls/${callId}/status`, {
                headers: this.headers,
                timeout: 5000
            });

            return {
                success: true,
                status: response.data.status,
                duration: response.data.duration,
                message: response.data.message
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
            
            return {
                success: false,
                error: error.response?.data?.message || error.message
            };
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    async hangupCall(callId) {
        try {
            const response = await axios.post(`${this.apiUrl}/calls/${callId}/hangup`, {}, {
                headers: this.headers,
                timeout: 5000
            });

            return {
                success: true,
                message: '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
            
            return {
                success: false,
                error: error.response?.data?.message || error.message
            };
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    formatPhoneNumber(phone) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        let cleanPhone = phone.replace(/\D/g, '');
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if (cleanPhone.startsWith('8')) {
            cleanPhone = '+7' + cleanPhone.substring(1);
        }
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
        if (cleanPhone.startsWith('7') && !cleanPhone.startsWith('+7')) {
            cleanPhone = '+' + cleanPhone;
        }
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +7
        if (!cleanPhone.startsWith('+')) {
            cleanPhone = '+7' + cleanPhone;
        }
        
        return cleanPhone;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
    async checkServiceStatus() {
        try {
            const response = await axios.get(`${this.apiUrl}/status`, {
                headers: this.headers,
                timeout: 5000
            });

            return {
                success: true,
                status: response.data.status,
                message: '–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:', error);
            
            return {
                success: false,
                error: error.response?.data?.message || error.message
            };
        }
    }
}

module.exports = new OnlinePBXService();

