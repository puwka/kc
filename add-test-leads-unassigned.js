const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–æ–≤ –ë–ï–ó –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
const testLeads = [
    // –ö—Ä–µ–¥–∏—Ç—ã (5 –ª–∏–¥–æ–≤)
    { name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', phone: '+7-900-100-2001', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–ë–æ—Ä–∏—Å –ò–≤–∞–Ω–æ–≤', phone: '+7-900-100-2002', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–í–µ—Ä–∞ –°–º–∏—Ä–Ω–æ–≤–∞', phone: '+7-900-100-2003', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–ì–µ–Ω–Ω–∞–¥–∏–π –ö–æ–∑–ª–æ–≤', phone: '+7-900-100-2004', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–î–∞—Ä—å—è –ú–æ—Ä–æ–∑–æ–≤–∞', phone: '+7-900-100-2005', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    
    // –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (5 –ª–∏–¥–æ–≤)
    { name: '–ï–≤–≥–µ–Ω–∏–π –í–æ–ª–∫–æ–≤', phone: '+7-900-200-3001', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ñ–∞–Ω–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞', phone: '+7-900-200-3002', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ó–∞—Ö–∞—Ä –õ–µ–±–µ–¥–µ–≤', phone: '+7-900-200-3003', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ò—Ä–∏–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞', phone: '+7-900-200-3004', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    { name: '–ö–∏—Ä–∏–ª–ª –ü–æ–ø–æ–≤', phone: '+7-900-200-3005', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' },
    
    // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (5 –ª–∏–¥–æ–≤)
    { name: '–õ–∞—Ä–∏—Å–∞ –§–µ–¥–æ—Ä–æ–≤–∞', phone: '+7-900-300-4001', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ú–∞–∫—Å–∏–º –ú–µ–¥–≤–µ–¥–µ–≤', phone: '+7-900-300-4002', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ù–∞–¥–µ–∂–¥–∞ –ö–æ–∑–ª–æ–≤–∞', phone: '+7-900-300-4003', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–û–ª–µ–≥ –û—Ä–ª–æ–≤', phone: '+7-900-300-4004', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    { name: '–ü–æ–ª–∏–Ω–∞ –ó–∞–π—Ü–µ–≤–∞', phone: '+7-900-300-4005', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'new' },
    
    // –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (5 –ª–∏–¥–æ–≤)
    { name: '–†—É—Å–ª–∞–Ω –°–º–∏—Ä–Ω–æ–≤', phone: '+7-900-400-5001', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', phone: '+7-900-400-5002', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–¢–∏–º—É—Ä –í–∞—Å–∏–ª—å–µ–≤', phone: '+7-900-400-5003', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–£–ª—å—è–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∞', phone: '+7-900-400-5004', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–§–µ–¥–æ—Ä –ì–æ–ª—É–±–µ–≤', phone: '+7-900-400-5005', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' }
];

async function addUnassignedTestLeads() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –ë–ï–ó –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');
        console.log('üìù –õ–∏–¥—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "new" –∏ assigned_to = null');
        console.log('');

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–æ–≤ –ë–ï–ó –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const leadsToInsert = testLeads.map((lead) => ({
            name: lead.name,
            phone: lead.phone,
            project: lead.project,
            status: lead.status,
            assigned_to: null, // –ù–ï –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            created_at: new Date().toISOString()
        }));

        const { data: insertedLeads, error: insertError } = await supabase
            .from('leads')
            .insert(leadsToInsert)
            .select('id, name, phone, project, status, assigned_to, created_at');

        if (insertError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤:', insertError);
            return;
        }

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –ë–ï–ó –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:');
        console.log('');

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        const groupedByProject = insertedLeads.reduce((acc, lead) => {
            if (!acc[lead.project]) {
                acc[lead.project] = [];
            }
            acc[lead.project].push(lead);
            return acc;
        }, {});

        Object.entries(groupedByProject).forEach(([project, leads]) => {
            console.log(`üìÅ ${project} (${leads.length} –ª–∏–¥–æ–≤):`);
            leads.forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name} - ${lead.phone} (ID: ${lead.id})`);
            });
            console.log('');
        });

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${insertedLeads.length}`);
        console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å: –≤—Å–µ "new"`);
        console.log(`   ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –≤—Å–µ –ë–ï–ó –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (assigned_to = null)`);
        console.log('');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
        const unassignedCount = insertedLeads.filter(lead => lead.assigned_to === null).length;
        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${unassignedCount} –∏–∑ ${insertedLeads.length} –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É`);

        console.log('');
        console.log('üéâ –í—Å–µ –ª–∏–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
        console.log('üí° –¢–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ó–≤–æ–Ω–æ–∫"');
        console.log('üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç –ª–∏–¥–∞ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addUnassignedTestLeads();
