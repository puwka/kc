// –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function testBalanceAPI() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø—Ä—è–º—É—é...\n');

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const { data: profiles, error: profilesError } = await supabase
            .from('profiles')
            .select('id')
            .limit(1);

        if (profilesError || !profiles || profiles.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const testUserId = profiles[0].id;
        console.log('üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', testUserId);

        // –¢–µ—Å—Ç 1: get_user_balance
        console.log('\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_balance...');
        const { data: balanceData, error: balanceError } = await supabase
            .rpc('get_user_balance', { p_user_id: testUserId });

        if (balanceError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ get_user_balance:', balanceError.message);
        } else {
            console.log('‚úÖ get_user_balance —Ä–∞–±–æ—Ç–∞–µ—Ç:', balanceData);
        }

        // –¢–µ—Å—Ç 2: get_user_transactions
        console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_transactions...');
        const { data: transactionsData, error: transactionsError } = await supabase
            .rpc('get_user_transactions', { 
                p_user_id: testUserId, 
                p_limit: 10, 
                p_offset: 0 
            });

        if (transactionsError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ get_user_transactions:', transactionsError.message);
        } else {
            console.log('‚úÖ get_user_transactions —Ä–∞–±–æ—Ç–∞–µ—Ç:', transactionsData);
        }

        // –¢–µ—Å—Ç 3: add_transaction
        console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º add_transaction...');
        const { error: addError } = await supabase
            .rpc('add_transaction', {
                p_user_id: testUserId,
                p_amount: 10.00,
                p_type: 'bonus',
                p_description: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
                p_lead_id: null
            });

        if (addError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ add_transaction:', addError.message);
        } else {
            console.log('‚úÖ add_transaction —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        const { data: newBalanceData, error: newBalanceError } = await supabase
            .rpc('get_user_balance', { p_user_id: testUserId });

        if (newBalanceError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', newBalanceError.message);
        } else {
            console.log('‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', newBalanceData);
        }

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

testBalanceAPI();
