const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSuccessCounting() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ª–∏–¥–æ–≤...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ª–∏–¥–∞–º–∏
        const { data: operators, error: operatorsError } = await supabase
            .from('user_balance')
            .select('user_id, balance, total_earned')
            .limit(1);

        if (operatorsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', operatorsError);
            return;
        }

        if (!operators || operators.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const operator = operators[0];
        console.log('üë§ –ù–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä:');
        console.log(`   ‚Ä¢ User ID: ${operator.user_id}`);
        console.log('');

        // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const { data: leads, error: leadsError } = await supabase
            .from('leads')
            .select('status, approval_status, name')
            .eq('assigned_to', operator.user_id);

        if (leadsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:', leadsError);
            return;
        }

        console.log('üìä –í—Å–µ –ª–∏–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:');
        leads.forEach(lead => {
            console.log(`   ‚Ä¢ ${lead.name}: ${lead.status} (approval: ${lead.approval_status || 'null'})`);
        });
        console.log('');

        // 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
        const oldStats = {
            total: leads.length,
            new: leads.filter(lead => lead.status === 'new').length,
            in_work: leads.filter(lead => lead.status === 'in_work').length,
            success: leads.filter(lead => lead.status === 'success').length, // –í–°–ï —É—Å–ø–µ—à–Ω—ã–µ
            fail: leads.filter(lead => lead.status === 'fail').length
        };

        // 4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤–æ–º—É —Å–ø–æ—Å–æ–±—É
        const newStats = {
            total: leads.length,
            new: leads.filter(lead => lead.status === 'new').length,
            in_work: leads.filter(lead => lead.status === 'in_work').length,
            success: leads.filter(lead => lead.status === 'success' && lead.approval_status === 'approved').length, // –¢–û–õ–¨–ö–û –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
            fail: leads.filter(lead => lead.status === 'fail').length,
            pending_approval: leads.filter(lead => lead.status === 'success' && lead.approval_status === 'pending').length
        };

        console.log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
        console.log('   –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–≤—Å–µ success):');
        console.log(`     ‚Ä¢ Success: ${oldStats.success}`);
        console.log(`     ‚Ä¢ Fail: ${oldStats.fail}`);
        console.log(`     ‚Ä¢ Total Processed: ${oldStats.in_work + oldStats.success + oldStats.fail}`);
        console.log('');
        console.log('   –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ):');
        console.log(`     ‚Ä¢ Success: ${newStats.success}`);
        console.log(`     ‚Ä¢ Fail: ${newStats.fail}`);
        console.log(`     ‚Ä¢ Pending Approval: ${newStats.pending_approval}`);
        console.log(`     ‚Ä¢ Total Processed: ${newStats.in_work + newStats.success + newStats.fail}`);
        console.log('');

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–¥—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        const pendingLeads = leads.filter(lead => lead.status === 'success' && lead.approval_status === 'pending');
        if (pendingLeads.length > 0) {
            console.log('‚è≥ –õ–∏–¥—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –û–ö–ö:');
            pendingLeads.forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name}: ${lead.status} (${lead.approval_status})`);
            });
            console.log('');
        }

        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
        const approvedLeads = leads.filter(lead => lead.status === 'success' && lead.approval_status === 'approved');
        if (approvedLeads.length > 0) {
            console.log('‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:');
            approvedLeads.forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name}: ${lead.status} (${lead.approval_status})`);
            });
            console.log('');
        }

        console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log('');
        console.log('üí° –¢–µ–ø–µ—Ä—å —É—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –û–ö–ö!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSuccessCounting();
