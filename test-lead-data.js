const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLeadData() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º pending review
        const { data: pendingReviews, error: reviewsError } = await supabase
            .from('quality_reviews')
            .select(`
                id,
                lead_id,
                status,
                leads!inner(name, phone, project, status, approval_status, assigned_to)
            `)
            .eq('status', 'pending')
            .limit(1);

        if (reviewsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending reviews:', reviewsError);
            return;
        }

        if (!pendingReviews || pendingReviews.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç pending reviews –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const review = pendingReviews[0];
        console.log('üìã –ù–∞–π–¥–µ–Ω pending review:');
        console.log(`   ‚Ä¢ Review ID: ${review.id}`);
        console.log(`   ‚Ä¢ Lead ID: ${review.lead_id} (—Ç–∏–ø: ${typeof review.lead_id})`);
        console.log(`   ‚Ä¢ Lead Name: ${review.leads.name}`);
        console.log(`   ‚Ä¢ Lead Project: ${review.leads.project}`);
        console.log(`   ‚Ä¢ Lead Status: ${review.leads.status}`);
        console.log(`   ‚Ä¢ Approval Status: ${review.leads.approval_status}`);
        console.log(`   ‚Ä¢ Assigned To: ${review.leads.assigned_to} (—Ç–∏–ø: ${typeof review.leads.assigned_to})`);
        console.log('');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –Ω–∞–ø—Ä—è–º—É—é...');
        const { data: leadData, error: leadError } = await supabase
            .from('leads')
            .select('*')
            .eq('id', review.lead_id)
            .single();

        if (leadError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞:', leadError);
            return;
        }

        console.log('üìä –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:');
        console.log(`   ‚Ä¢ ID: ${leadData.id} (—Ç–∏–ø: ${typeof leadData.id})`);
        console.log(`   ‚Ä¢ Name: ${leadData.name}`);
        console.log(`   ‚Ä¢ Project: ${leadData.project}`);
        console.log(`   ‚Ä¢ Status: ${leadData.status}`);
        console.log(`   ‚Ä¢ Approval Status: ${leadData.approval_status}`);
        console.log(`   ‚Ä¢ Assigned To: ${leadData.assigned_to} (—Ç–∏–ø: ${typeof leadData.assigned_to})`);
        console.log(`   ‚Ä¢ Assigned To NULL?: ${leadData.assigned_to === null}`);
        console.log('');

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞...');
        const { data: projectData, error: projectError } = await supabase
            .from('projects')
            .select('*')
            .eq('name', leadData.project)
            .single();

        if (projectError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞:', projectError);
        } else {
            console.log('üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:');
            console.log(`   ‚Ä¢ Name: ${projectData.name}`);
            console.log(`   ‚Ä¢ Success Price: ${projectData.success_price}`);
        }

        console.log('');
        console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testLeadData();
