const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugApproval() {
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º pending review
        const { data: pendingReviews, error: reviewsError } = await supabase
            .from('quality_reviews')
            .select(`
                id,
                lead_id,
                status,
                leads!inner(name, phone, project, status, approval_status, assigned_to)
            `)
            .eq('status', 'pending')
            .limit(1);

        if (reviewsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending reviews:', reviewsError);
            return;
        }

        if (!pendingReviews || pendingReviews.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç pending reviews –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const review = pendingReviews[0];
        console.log('üìã –ù–∞–π–¥–µ–Ω pending review:');
        console.log(`   ‚Ä¢ Review ID: ${review.id} (—Ç–∏–ø: ${typeof review.id})`);
        console.log(`   ‚Ä¢ Lead ID: ${review.lead_id} (—Ç–∏–ø: ${typeof review.lead_id})`);
        console.log(`   ‚Ä¢ Lead Name: ${review.leads.name}`);
        console.log(`   ‚Ä¢ Lead Project: ${review.leads.project}`);
        console.log(`   ‚Ä¢ Lead Status: ${review.leads.status}`);
        console.log(`   ‚Ä¢ Approval Status: ${review.leads.approval_status}`);
        console.log(`   ‚Ä¢ Assigned To: ${review.leads.assigned_to} (—Ç–∏–ø: ${typeof review.leads.assigned_to})`);
        console.log('');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lead_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ integer
        const leadId = parseInt(review.lead_id);
        console.log(`üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ lead_id: ${review.lead_id} -> ${leadId} (—Ç–∏–ø: ${typeof leadId})`);
        
        if (isNaN(leadId)) {
            console.error('‚ùå lead_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!');
            return;
        }

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π RPC –≤—ã–∑–æ–≤
        console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π RPC –≤—ã–∑–æ–≤...');
        
        try {
            const { data: testResult, error: testError } = await supabase
                .rpc('approve_lead_by_qc', {
                    p_lead_id: leadId,
                    p_qc_comment: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ'
                });

            if (testError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ RPC:', testError);
            } else {
                console.log('‚úÖ RPC —É—Å–ø–µ—à–Ω–æ:', testResult);
            }
        } catch (rpcError) {
            console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ RPC:', rpcError);
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugApproval();
