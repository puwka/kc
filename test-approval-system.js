const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testApprovalSystem() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –ª–∏–¥–æ–≤...');
        console.log('');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö:');
        const { data: successLeads, error: successError } = await supabase
            .from('leads')
            .select('id, name, phone, project, status, approval_status')
            .eq('status', 'success');

        if (successError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ª–∏–¥–æ–≤:', successError);
            return;
        }

        console.log(`   –ù–∞–π–¥–µ–Ω–æ ${successLeads.length} —É—Å–ø–µ—à–Ω—ã—Ö –ª–∏–¥–æ–≤:`);
        successLeads.forEach(lead => {
            console.log(`   ‚Ä¢ ${lead.name} (${lead.project}) - –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${lead.approval_status || 'pending'}`);
        });
        console.log('');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –û–ö–ö
        console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –û–ö–ö:');
        const { data: qualityReviews, error: reviewsError } = await supabase
            .from('quality_reviews')
            .select(`
                id, 
                status, 
                created_at,
                leads!inner(id, name, phone, project)
            `)
            .order('created_at', { ascending: false });

        if (reviewsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö:', reviewsError);
            return;
        }

        console.log(`   –ù–∞–π–¥–µ–Ω–æ ${qualityReviews.length} –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –û–ö–ö:`);
        qualityReviews.forEach(review => {
            const lead = review.leads;
            console.log(`   ‚Ä¢ ID: ${review.id} - ${lead.name} (${lead.project}) - –°—Ç–∞—Ç—É—Å: ${review.status}`);
        });
        console.log('');

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
        console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ü–µ–Ω–∞–º–∏:');
        const { data: projects, error: projectsError } = await supabase
            .from('projects')
            .select('name, success_price, is_active')
            .eq('is_active', true);

        if (projectsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError);
            return;
        }

        console.log('   –ü—Ä–æ–µ–∫—Ç—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:');
        projects.forEach(project => {
            console.log(`   ‚Ä¢ ${project.name}: ${project.success_price}‚ÇΩ`);
        });
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:');
        const { data: operators, error: operatorsError } = await supabase
            .from('profiles')
            .select('id, name, role')
            .in('role', ['operator', 'supervisor', 'admin']);

        if (operatorsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', operatorsError);
            return;
        }

        for (const operator of operators) {
            const { data: balanceData, error: balanceError } = await supabase
                .rpc('get_user_balance', { user_id: operator.id });

            if (!balanceError && balanceData && balanceData.length > 0) {
                const balance = balanceData[0];
                console.log(`   ‚Ä¢ ${operator.name} (${operator.role}): ${balance.balance}‚ÇΩ (–≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.total_earned}‚ÇΩ)`);
            } else {
                console.log(`   ‚Ä¢ ${operator.name} (${operator.role}): 0‚ÇΩ`);
            }
        }
        console.log('');

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
        const { data: transactions, error: transactionsError } = await supabase
            .from('user_transactions')
            .select(`
                id, 
                type, 
                amount, 
                description, 
                created_at,
                profiles!inner(name)
            `)
            .order('created_at', { ascending: false })
            .limit(10);

        if (transactionsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError);
            return;
        }

        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
        transactions.forEach(transaction => {
            const date = new Date(transaction.created_at).toLocaleString('ru-RU');
            console.log(`   ‚Ä¢ ${transaction.profiles.name}: ${transaction.amount}‚ÇΩ - ${transaction.description} (${date})`);
        });
        console.log('');

        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('');
        console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('   1. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –≤–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—ã–µ –ª–∏–¥—ã –≤ —Ä–∞–±–æ—Ç—É');
        console.log('   2. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ª–∏–¥—ã –∫–∞–∫ "—É—Å–ø–µ—à–Ω—ã–µ" - –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –û–ö–ö');
        console.log('   3. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –û–ö–ö –∏ –æ–¥–æ–±—Ä—å—Ç–µ/–æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ª–∏–¥—ã');
        console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞');
        console.log('   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
testApprovalSystem();
