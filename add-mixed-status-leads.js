const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –õ–∏–¥—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mixedStatusLeads = [
    // –õ–∏–¥—ã –≤ —Ä–∞–±–æ—Ç–µ
    { name: '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–≤–∞', phone: '+7-900-100-2001', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'in_work' },
    { name: '–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤', phone: '+7-900-100-2002', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'in_work' },
    
    // –£—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã (–ø–æ–ø–∞–¥—É—Ç –≤ –û–ö–ö)
    { name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', phone: '+7-900-100-2003', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'success' },
    { name: '–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤', phone: '+7-900-100-2004', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'success' },
    { name: '–û–ª—å–≥–∞ –í–æ–ª–∫–æ–≤–∞', phone: '+7-900-100-2005', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'success' },
    
    // –ù–µ—É–¥–∞—á–Ω—ã–µ –ª–∏–¥—ã
    { name: '–ò–≥–æ—Ä—å –õ–µ–±–µ–¥–µ–≤', phone: '+7-900-100-2006', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'fail' },
    { name: '–¢–∞—Ç—å—è–Ω–∞ –ó–∞–π—Ü–µ–≤–∞', phone: '+7-900-100-2007', project: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', status: 'fail' },
    
    // –ï—â–µ –Ω–æ–≤—ã–µ –ª–∏–¥—ã
    { name: '–ê–ª–µ–∫—Å–µ–π –ü–æ–ø–æ–≤', phone: '+7-900-100-2008', project: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', status: 'new' },
    { name: '–ù–∞—Ç–∞–ª—å—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞', phone: '+7-900-100-2009', project: '–ö—Ä–µ–¥–∏—Ç—ã', status: 'new' },
    { name: '–í–ª–∞–¥–∏–º–∏—Ä –û—Ä–ª–æ–≤', phone: '+7-900-100-2010', project: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', status: 'new' }
];

async function addMixedStatusLeads() {
    try {
        console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        const { data: operators, error: operatorsError } = await supabase
            .from('profiles')
            .select('id, name, role')
            .in('role', ['operator', 'supervisor', 'admin'])
            .limit(3);

        if (operatorsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', operatorsError);
            return;
        }

        if (!operators || operators.length === 0) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${operators.length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–æ–≤
        const leadsToInsert = mixedStatusLeads.map((lead, index) => ({
            name: lead.name,
            phone: lead.phone,
            project: lead.project,
            status: lead.status,
            assigned_to: operators[index % operators.length].id,
            created_at: new Date().toISOString(),
            // –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment: lead.status === 'success' ? `–¢–µ—Å—Ç–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ª–∏–¥ –ø–æ –ø—Ä–æ–µ–∫—Ç—É ${lead.project}` : null
        }));

        const { data: insertedLeads, error: insertError } = await supabase
            .from('leads')
            .insert(leadsToInsert)
            .select('id, name, phone, project, status, assigned_to');

        if (insertError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤:', insertError);
            return;
        }

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏–¥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏:');
        console.log('');

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        const groupedByStatus = insertedLeads.reduce((acc, lead) => {
            if (!acc[lead.status]) {
                acc[lead.status] = [];
            }
            acc[lead.status].push(lead);
            return acc;
        }, {});

        Object.entries(groupedByStatus).forEach(([status, leads]) => {
            const statusNames = {
                'new': 'üÜï –ù–æ–≤—ã–µ',
                'in_work': '‚ö° –í —Ä–∞–±–æ—Ç–µ',
                'success': '‚úÖ –£—Å–ø–µ—à–Ω—ã–µ (–ø–æ–ø–∞–¥—É—Ç –≤ –û–ö–ö)',
                'fail': '‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ'
            };
            console.log(`${statusNames[status] || status} (${leads.length} –ª–∏–¥–æ–≤):`);
            leads.forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name} - ${lead.phone} (${lead.project})`);
            });
            console.log('');
        });

        console.log('üéØ –ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:');
        console.log('   ‚Ä¢ –ù–æ–≤—ã–µ –ª–∏–¥—ã - –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Ö –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É');
        console.log('   ‚Ä¢ –õ–∏–¥—ã –≤ —Ä–∞–±–æ—Ç–µ - –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Ö –∑–∞–≤–µ—Ä—à–∏—Ç—å');
        console.log('   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã - –ø–æ–ø–∞–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥—å –û–ö–ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        console.log('   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ –ª–∏–¥—ã - —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π');
        console.log('');
        console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addMixedStatusLeads();
