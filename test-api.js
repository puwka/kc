require('dotenv').config();

async function testAPI() {
    const baseUrl = 'http://localhost:3000';
    
    console.log('üîç Testing API endpoints...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try {
        const response = await fetch(baseUrl);
        if (response.ok) {
            console.log('‚úÖ Server is running');
        } else {
            console.log('‚ùå Server returned:', response.status);
        }
    } catch (error) {
        console.log('‚ùå Server not accessible:', error.message);
        return;
    }
    
    // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testEmail = 'testuser' + Date.now() + '@gmail.com';
    const testData = {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: testEmail,
        password: 'password123',
        role: 'operator'
    };
    
    console.log('üìß Testing registration with email:', testEmail);
    
    try {
        const response = await fetch(`${baseUrl}/api/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Registration successful:', data.message);
            
            // –¢–µ—Å—Ç 3: –í—Ö–æ–¥
            console.log('üîë Testing login...');
            
            const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: testEmail,
                    password: 'password123'
                })
            });
            
            const loginData = await loginResponse.json();
            
            if (loginResponse.ok) {
                console.log('‚úÖ Login successful');
                console.log('üë§ User:', loginData.user);
                
                // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint
                console.log('üîí Testing protected endpoint...');
                
                const protectedResponse = await fetch(`${baseUrl}/api/leads`, {
                    headers: {
                        'Authorization': `Bearer ${loginData.token}`
                    }
                });
                
                if (protectedResponse.ok) {
                    console.log('‚úÖ Protected endpoint accessible');
                } else {
                    console.log('‚ùå Protected endpoint error:', protectedResponse.status);
                }
                
            } else {
                console.log('‚ùå Login failed:', loginData.error);
            }
            
        } else {
            console.log('‚ùå Registration failed:', data.error);
        }
        
    } catch (error) {
        console.log('‚ùå API test failed:', error.message);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –¥–æ—Å—Ç—É–ø–µ–Ω
if (typeof fetch === 'undefined') {
    console.log('‚ùå Fetch not available. Install node-fetch or use Node.js 18+');
    process.exit(1);
}

testAPI();
