const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTriggerPayment() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 3‚ÇΩ –∑–∞ –∑–≤–æ–Ω–æ–∫...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_work'
        const { data: inWorkLeads, error: leadsError } = await supabase
            .from('leads')
            .select('*')
            .eq('status', 'in_work')
            .limit(1);

        if (leadsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:', leadsError);
            return;
        }

        if (!inWorkLeads || inWorkLeads.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –ª–∏–¥–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_work" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const lead = inWorkLeads[0];
        console.log('üìã –ù–∞–π–¥–µ–Ω –ª–∏–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`   ‚Ä¢ ID: ${lead.id}`);
        console.log(`   ‚Ä¢ Name: ${lead.name}`);
        console.log(`   ‚Ä¢ Status: ${lead.status}`);
        console.log(`   ‚Ä¢ Assigned To: ${lead.assigned_to}`);
        console.log('');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');
        const { data: balanceBefore, error: balanceError } = await supabase
            .from('user_balance')
            .select('*')
            .eq('user_id', lead.assigned_to)
            .single();

        if (balanceError) {
            console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)');
        } else {
            console.log(`   ‚Ä¢ Balance Before: ${balanceBefore.balance}‚ÇΩ`);
            console.log(`   ‚Ä¢ Total Earned Before: ${balanceBefore.total_earned}‚ÇΩ`);
        }

        // 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –Ω–∞ 'fail' (–¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä)
        console.log('');
        console.log('üîÑ –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –Ω–∞ "fail"...');
        
        const { error: updateError } = await supabase
            .from('leads')
            .update({ 
                status: 'fail',
                updated_at: new Date().toISOString()
            })
            .eq('id', lead.id);

        if (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞:', updateError);
            return;
        }

        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "fail"');

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä
        console.log('');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä...');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ç—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const { data: balanceAfter, error: balanceAfterError } = await supabase
            .from('user_balance')
            .select('*')
            .eq('user_id', lead.assigned_to)
            .single();

        if (balanceAfterError) {
            console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
        } else {
            console.log(`   ‚Ä¢ Balance After: ${balanceAfter.balance}‚ÇΩ`);
            console.log(`   ‚Ä¢ Total Earned After: ${balanceAfter.total_earned}‚ÇΩ`);
            
            if (balanceBefore) {
                const balanceIncrease = balanceAfter.balance - balanceBefore.balance;
                const earnedIncrease = balanceAfter.total_earned - balanceBefore.total_earned;
                console.log(`   ‚Ä¢ Balance Increase: ${balanceIncrease}‚ÇΩ`);
                console.log(`   ‚Ä¢ Earned Increase: ${earnedIncrease}‚ÇΩ`);
                
                if (balanceIncrease >= 3.00) {
                    console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª! –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª 3‚ÇΩ –∑–∞ –∑–≤–æ–Ω–æ–∫');
                } else {
                    console.log('‚ùå –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                }
            } else {
                console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
            }
        }

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('');
        console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        
        const { data: transactions, error: transactionsError } = await supabase
            .from('user_transactions')
            .select('*')
            .eq('user_id', lead.assigned_to)
            .eq('lead_id', lead.id)
            .order('created_at', { ascending: false })
            .limit(1);

        if (transactionsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError);
        } else if (transactions && transactions.length > 0) {
            const transaction = transactions[0];
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:');
            console.log(`   ‚Ä¢ Amount: ${transaction.amount}‚ÇΩ`);
            console.log(`   ‚Ä¢ Type: ${transaction.transaction_type}`);
            console.log(`   ‚Ä¢ Description: ${transaction.description}`);
        } else {
            console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
        }

        console.log('');
        console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTriggerPayment();
