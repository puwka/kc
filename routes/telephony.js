const express = require('express');
const onlinepbxService = require('../services/onlinepbx');
const { authenticateToken } = require('../middleware/auth');
const supabaseAdmin = require('../config/supabase-admin');

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
router.post('/initiate-call', authenticateToken, async (req, res) => {
    try {
        const { leadId, phoneNumber } = req.body;

        if (!leadId || !phoneNumber) {
            return res.status(400).json({ 
                success: false, 
                error: 'Lead ID –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ
        const { data: lead, error: leadError } = await supabaseAdmin
            .from('leads')
            .select('*')
            .eq('id', leadId)
            .eq('assigned_to', req.user.id)
            .single();

        if (leadError || !lead) {
            return res.status(404).json({ 
                success: false, 
                error: '–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å' 
            });
        }

        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ OnlinePBX
        const callResult = await onlinepbxService.initiateCall(
            req.user.id,
            phoneNumber,
            leadId
        );

        if (!callResult.success) {
            return res.status(500).json({
                success: false,
                error: callResult.error,
                message: callResult.message
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: callRecord, error: callError } = await supabaseAdmin
            .from('call_sessions')
            .insert({
                operator_id: req.user.id,
                lead_id: leadId,
                phone_number: phoneNumber,
                call_id: callResult.callId,
                status: 'initiated',
                created_at: new Date().toISOString()
            })
            .select()
            .single();

        if (callError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞:', callError);
        }

        res.json({
            success: true,
            callId: callResult.callId,
            status: callResult.status,
            message: '–ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
router.get('/call-status/:callId', authenticateToken, async (req, res) => {
    try {
        const { callId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: callRecord, error: callError } = await supabaseAdmin
            .from('call_sessions')
            .select('*')
            .eq('call_id', callId)
            .eq('operator_id', req.user.id)
            .single();

        if (callError || !callRecord) {
            return res.status(404).json({ 
                success: false, 
                error: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç OnlinePBX
        const statusResult = await onlinepbxService.getCallStatus(callId);

        if (statusResult.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await supabaseAdmin
                .from('call_sessions')
                .update({
                    status: statusResult.status,
                    duration: statusResult.duration,
                    updated_at: new Date().toISOString()
                })
                .eq('call_id', callId);
        }

        res.json({
            success: true,
            status: statusResult.status || callRecord.status,
            duration: statusResult.duration || callRecord.duration,
            message: statusResult.message || '–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
router.post('/hangup-call/:callId', authenticateToken, async (req, res) => {
    try {
        const { callId } = req.params;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        const { data: callRecord, error: callError } = await supabaseAdmin
            .from('call_sessions')
            .select('*')
            .eq('call_id', callId)
            .eq('operator_id', req.user.id)
            .single();

        if (callError || !callRecord) {
            return res.status(404).json({ 
                success: false, 
                error: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ OnlinePBX
        const hangupResult = await onlinepbxService.hangupCall(callId);

        if (hangupResult.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await supabaseAdmin
                .from('call_sessions')
                .update({
                    status: 'completed',
                    updated_at: new Date().toISOString()
                })
                .eq('call_id', callId);
        }

        res.json({
            success: hangupResult.success,
            message: hangupResult.message || '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç OnlinePBX
router.post('/callback', async (req, res) => {
    try {
        const { call_id, status, duration, error } = req.body;

        console.log('üìû Callback –æ—Ç OnlinePBX:', { call_id, status, duration, error });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error: updateError } = await supabaseAdmin
            .from('call_sessions')
            .update({
                status: status,
                duration: duration,
                error: error,
                updated_at: new Date().toISOString()
            })
            .eq('call_id', call_id);

        if (updateError) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', updateError);
        }

        // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if (status === 'answered') {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ SSE
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω:', call_id);
        }

        res.json({ success: true, message: 'Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback' 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
router.get('/status', authenticateToken, async (req, res) => {
    try {
        const statusResult = await onlinepbxService.checkServiceStatus();

        res.json({
            success: statusResult.success,
            status: statusResult.status,
            message: statusResult.message || '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

module.exports = router;

