const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testQCApproval() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ –û–ö–ö...');
        console.log('');

        // 1. –ù–∞—Ö–æ–¥–∏–º pending review
        const { data: pendingReviews, error: reviewsError } = await supabase
            .from('quality_reviews')
            .select(`
                id,
                lead_id,
                status,
                leads!inner(name, phone, project, status, approval_status)
            `)
            .eq('status', 'pending')
            .limit(1);

        if (reviewsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending reviews:', reviewsError);
            return;
        }

        if (!pendingReviews || pendingReviews.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç pending reviews –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const review = pendingReviews[0];
        console.log('üìã –ù–∞–π–¥–µ–Ω pending review:');
        console.log(`   ‚Ä¢ Review ID: ${review.id}`);
        console.log(`   ‚Ä¢ Lead ID: ${review.lead_id}`);
        console.log(`   ‚Ä¢ Lead Name: ${review.leads.name}`);
        console.log(`   ‚Ä¢ Lead Project: ${review.leads.project}`);
        console.log(`   ‚Ä¢ Lead Status: ${review.leads.status}`);
        console.log(`   ‚Ä¢ Approval Status: ${review.leads.approval_status}`);
        console.log('');

        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API...');
        
        const response = await fetch('http://localhost:3000/api/quality/reviews/' + review.id + '/approve', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer test-token' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω
            },
            body: JSON.stringify({
                comment: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API'
            })
        });

        console.log('üì° Response status:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);
        } else {
            const error = await response.text();
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        
        const { data: updatedReview, error: updatedError } = await supabase
            .from('quality_reviews')
            .select(`
                id,
                lead_id,
                status,
                qc_comment,
                reviewed_at,
                leads!inner(name, phone, project, status, approval_status, qc_comment)
            `)
            .eq('id', review.id)
            .single();

        if (updatedError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ review:', updatedError);
            return;
        }

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(`   ‚Ä¢ Review Status: ${updatedReview.status}`);
        console.log(`   ‚Ä¢ Review Comment: ${updatedReview.qc_comment || '–ù–µ—Ç'}`);
        console.log(`   ‚Ä¢ Review Date: ${updatedReview.reviewed_at || '–ù–µ—Ç'}`);
        console.log(`   ‚Ä¢ Lead Approval Status: ${updatedReview.leads.approval_status}`);
        console.log(`   ‚Ä¢ Lead QC Comment: ${updatedReview.leads.qc_comment || '–ù–µ—Ç'}`);

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('');
        console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        
        const { data: transactions, error: transactionsError } = await supabase
            .from('user_transactions')
            .select('*')
            .eq('lead_id', review.lead_id)
            .order('created_at', { ascending: false })
            .limit(1);

        if (transactionsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError);
        } else if (transactions && transactions.length > 0) {
            const transaction = transactions[0];
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:');
            console.log(`   ‚Ä¢ Amount: ${transaction.amount}‚ÇΩ`);
            console.log(`   ‚Ä¢ Type: ${transaction.transaction_type}`);
            console.log(`   ‚Ä¢ Description: ${transaction.description}`);
        } else {
            console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        console.log('');
        console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testQCApproval();
